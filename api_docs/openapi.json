{
  "components": {
    "examples": {
      "balancingRequest": {
        "summary": "balancing - Request balancing data",
        "value": {
          "ean": "541456700001772328"
        }
      },
      "balancingResponse": {
        "summary": "balancing - Request balancing data",
        "value": {
          "ean": 541456700001772350,
          "reference": "TQ7-EIE-E40"
        }
      },
      "calculatorBasicErrorResponse": {
        "summary": "Basic error response",
        "value": {
          "error": "A error occurred while processing the request."
        }
      },
      "calculatorBasicRequest": {
        "summary": "Basic request",
        "value": {
          "battery_kw": 5,
          "battery_kwh": 10.5,
          "ev_kwh": 0,
          "load_kwh": 2000,
          "pv_kwp": 8.4,
          "region": "BE",
          "segment": "residential"
        }
      },
      "calculatorErrorResponseBatInvMismatch": {
        "summary": "Error response for battery and inverter mismatch",
        "value": {
          "details": {
            "errorType": "batOrInverterZeroButNotBoth"
          },
          "error": "Battery and inverter must be both '0' or both non-zero"
        }
      },
      "calculatorErrorResponseOutOfBounds": {
        "summary": "Error response for out of bounds values",
        "value": {
          "details": {
            "errorType": "outOfBounds",
            "parameters": [
              {
                "key": "battery_kwh",
                "limits": {
                  "max": 25,
                  "min": 5
                },
                "value": 1000
              },
              {
                "key": "inverter_kw",
                "limits": {
                  "max": 10,
                  "min": 2.5
                },
                "value": 100
              },
              {
                "key": "pv_kwp",
                "limits": {
                  "max": 23,
                  "min": 0.1
                },
                "value": 1000
              }
            ]
          },
          "error": "Request out of bounds for battery_kwh, inverter_kw, pv_kwp.\n - battery_kwh = 1000.0, limits are [5, 25]\n - inverter_kw = 100.0, limits are [2.5, 10]\n - pv_kwp = 1000.0, limits are [0.1, 23]"
        }
      },
      "calculatorErrorResponseRegionSegment": {
        "summary": "Error response for unsupported region or segment",
        "value": {
          "details": {
            "errorType": "unsuportedRegionOrSegment"
          },
          "error": "Region 'PT', segment 'residential' or combination of both is not yet supported."
        }
      },
      "cepExample": {
        "summary": "CEP - Request device comfort energy price data",
        "value": {
          "last12MonthsAggregate": {
            "energyComfortCost": 860,
            "energyComfortPrice": 0.2,
            "energyStandardPrice": 0.29,
            "energyUsage": 4200
          },
          "last7DaysAggregate": {
            "energyComfortCost": 18.83,
            "energyComfortPrice": 0.21,
            "energyStandardPrice": 0.29,
            "energyUsage": 85.9
          },
          "last7DaysHistory": [
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.54,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 12.1,
              "period": "2025-06-06T00:00:00.000Z"
            },
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.81,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 13.4,
              "period": "2025-06-07T00:00:00.000Z"
            },
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.48,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 11.8,
              "period": "2025-06-08T00:00:00.000Z"
            },
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.21,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 10.5,
              "period": "2025-06-09T00:00:00.000Z"
            },
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.77,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 13.2,
              "period": "2025-06-10T00:00:00.000Z"
            },
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.71,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 12.9,
              "period": "2025-06-11T00:00:00.000Z"
            },
            {
              "_periodFormat": "day",
              "energyComfortCost": 2.31,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.29,
              "energyUsage": 11,
              "period": "2025-06-12T00:00:00.000Z"
            }
          ],
          "lastMonthAggregate": {
            "energyComfortCost": 72.5,
            "energyComfortPrice": 0.21,
            "energyStandardPrice": 0.3,
            "energyUsage": 345
          },
          "monthlyHistory": [
            {
              "_periodFormat": "year",
              "energyComfortCost": 860,
              "energyComfortPrice": 0.2,
              "energyStandardPrice": 0.29,
              "energyUsage": 4200,
              "months": [
                {
                  "_periodFormat": "month",
                  "energyComfortCost": 58.9,
                  "energyComfortPrice": 0.19,
                  "energyStandardPrice": 0.28,
                  "energyUsage": 310,
                  "period": "2024-01"
                },
                {
                  "_periodFormat": "month",
                  "energyComfortCost": 55.1,
                  "energyComfortPrice": 0.19,
                  "energyStandardPrice": 0.28,
                  "energyUsage": 290,
                  "period": "2024-02"
                }
              ],
              "period": "2024"
            },
            {
              "_periodFormat": "year",
              "energyComfortCost": 368,
              "energyComfortPrice": 0.21,
              "energyStandardPrice": 0.3,
              "energyUsage": 1750,
              "months": [
                {
                  "_periodFormat": "month",
                  "energyComfortCost": 75.6,
                  "energyComfortPrice": 0.21,
                  "energyStandardPrice": 0.3,
                  "energyUsage": 360,
                  "period": "2025-01"
                },
                {
                  "_periodFormat": "month",
                  "energyComfortCost": 71.4,
                  "energyComfortPrice": 0.21,
                  "energyStandardPrice": 0.3,
                  "energyUsage": 340,
                  "period": "2025-02"
                }
              ],
              "period": "2025"
            }
          ]
        }
      },
      "configRequest": {
        "summary": "config - Request new configuration",
        "value": {
          "formData": {
            "clientToken": "Aoh980WDMlHyZEvKZmsYV",
            "configuration": {
              "address": "1600 Amphitheatre Parkway Mountain View, CA 94043",
              "converter": "Goodwe GW5000-EH"
            },
            "settings": {
              "ACPhaseCount": 1,
              "EMSHorizon": 8,
              "EVChargers": [],
              "EVSetpointTimeConstant": 30,
              "VAT": 21,
              "antiCurtailment": "None",
              "balancingPowerDropFactor": 50,
              "batteryCycleCost": 0.02,
              "batterySetpointTimeConstant": 5,
              "cellTransientResponseTime": 15,
              "cellVoltageDelta": 0.03,
              "converters": [
                {
                  "battery": {
                    "balancingCurrent": 0,
                    "batteryType": "None",
                    "cellCapacity": 0,
                    "cellMaxCurrent": 0,
                    "cellMaxVoltage": 0,
                    "cellMinVoltage": 0,
                    "cellRatedVoltage": 0,
                    "cellsPerPack": 0,
                    "packCount": 0
                  },
                  "maxACDCPower": 5000,
                  "maxBatteryCurrent": 26,
                  "maxMPPTPower": 6000,
                  "pvArrays": []
                }
              ],
              "cyclingCurrent": 5,
              "dso": 0,
              "enableCentralEMSControl": false,
              "enableDoubleTariff": false,
              "enableSubMTUOptimization": true,
              "flipEastronPolarity": false,
              "genericLoadMaximumElectricityPrice": 0,
              "hasDigitalMeter": true,
              "hasEastronMeter": false,
              "hasP1": false,
              "initialBalancingPower": 1000,
              "injectionLimit": 100,
              "injectionPenalty": 0.01,
              "isConverterSelfUseCapable": true,
              "latitude": 50.85,
              "longitude": 4.35,
              "maxGridCharge": 10,
              "maxR1Allocation": 90,
              "maximumStateOfCharge": 100,
              "meterCurrentLimitation": 25,
              "meterPowerDeadband": 25,
              "meterPowerDeadbandInvert": true,
              "minimumStateOfCharge": 10,
              "nominalR1TenderPrice": 80,
              "persistData": true,
              "pvArraysRetrofit": [],
              "r1Partner": 2,
              "reconstitutionRecoveryTime": 2,
              "region": "Flanders",
              "retrofitPVMeasurement": "None",
              "skipClockCheck": false,
              "tariffStructure": {
                "consumptionPrice": 0.2,
                "injectionPrice": 0.15,
                "tariffType": "SingleTariffFixed"
              },
              "useFutureDSO": false
            }
          }
        }
      },
      "configResponse": {
        "summary": "config - Request new configuration",
        "value": {}
      },
      "createRequest": {
        "summary": "Create devices",
        "value": {
          "devices": [
            {
              "ean": "541456700001772329",
              "settings": {
                "ACPhaseCount": "3x230V",
                "VAT": 10,
                "converters": [
                  {
                    "battery": {
                      "balancingCurrent": 0,
                      "batteryType": "None",
                      "cellCapacity": 0,
                      "cellMaxCurrent": 0,
                      "cellMaxVoltage": 0,
                      "cellMinVoltage": 0,
                      "cellRatedVoltage": 0,
                      "cellsPerPack": 0,
                      "packCount": 0
                    },
                    "maxACDCPower": 5000,
                    "maxBatteryChargePower": 5000,
                    "maxBatteryDischargePower": 5000,
                    "maxMPPTPower": 6000,
                    "pvArrays": []
                  }
                ],
                "dso": "FLUVIUSANTWERPEN",
                "latitude": 50.85,
                "longitude": 4.35,
                "maximumReserveStateOfCharge": 25,
                "maximumStateOfCharge": 100,
                "meterCurrentLimitation": 25,
                "minimumStateOfCharge": 10,
                "region": "Netherlands",
                "tariffStructure": {
                  "tariffType": "SingleTariffVariable"
                }
              }
            },
            {
              "ean": "5414567000017788328",
              "settings": {
                "a": 1,
                "b": 2
              }
            }
          ]
        }
      },
      "dataGetResponse": {
        "summary": "data - Response to successful Cloudflex site data collection",
        "value": {
          "EVPowerSetpoint": {
            "baf2fc3f5b668452": -6184.35
          },
          "intent": 2,
          "monthPeak": 1234,
          "powerSetpointACDC": 1000,
          "powerSetpointBat": 1000,
          "powerSetpointMeter": 1000,
          "timestamp": 1661076259171
        }
      },
      "dataPostRequest": {
        "summary": "data - Cloudflex post data",
        "value": {
          "acCoupledPvPower": 1000,
          "dcCoupledPvPower": 200,
          "ev": {
            "baf2fc3f5b668452": {
              "minPower": 200,
              "numberOfPhases": 3,
              "power": 1000
            }
          },
          "gridPower": 1000,
          "meterPower": 5000,
          "stateOfCharge": 2,
          "storageCurrent": 50,
          "storagePower": 50.01,
          "timestamp": 1661076259171
        }
      },
      "dataPostResponse": {
        "summary": "data - Response to successful Cloudflex post data",
        "value": {
          "acCoupledPvPower": 1000,
          "dcCoupledPvPower": 200,
          "ev": {
            "baf2fc3f5b668452": {
              "minPower": 200,
              "numberOfPhases": 3,
              "power": 1000
            }
          },
          "gridPower": 1000,
          "meterPower": 5000,
          "stateOfCharge": 2,
          "storageCurrent": 50,
          "storagePower": 50.01,
          "timestamp": 1661076259171
        }
      },
      "deleteRequest": {
        "summary": "Delete devices",
        "value": {
          "devices": [
            {
              "ean": "541456700001772328"
            }
          ]
        }
      },
      "deviceDataPushRequest": {
        "summary": "Device data supply",
        "value": {
          "devices": [
            {
              "data": [
                {
                  "inverter": {
                    "ACFrequency": 50.01,
                    "MeterPower": 5000,
                    "TotalInvPower": 1000,
                    "backupPower": 200,
                    "batteryCurrentInv": 2,
                    "batteryVoltageInv": 50,
                    "stateOfCharge": 50,
                    "stateOfHealth": 50,
                    "timestamp": 1661076259.171
                  }
                }
              ],
              "ean": "541456700001772328"
            }
          ]
        }
      },
      "deviceSchemaGetResponse": {
        "summary": "schema - Get device schema",
        "value": {
          "type": "object"
        }
      },
      "devicesSupportedResponse": {
        "summary": "List of supported devices",
        "value": [
          {
            "brand": "Solax",
            "model": "Hybrid G3",
            "status": "on hold"
          },
          {
            "brand": "Victron",
            "model": "Multiplus II",
            "status": "Backlog"
          },
          {
            "brand": "Solax",
            "model": "Hybrid G4",
            "status": "on hold"
          },
          {
            "brand": "Solax",
            "model": "X1-Hybrid G3/G4",
            "status": "Done"
          },
          {
            "brand": "Solax",
            "model": "X1-FIT G3/G4",
            "status": "Done"
          }
        ]
      },
      "editRequest": {
        "summary": "Edit devices",
        "value": {
          "devices": [
            {
              "ean": "541456700001772329",
              "settings": {
                "ACPhaseCount": "3x230V",
                "VAT": 10,
                "converters": [
                  {
                    "battery": {
                      "balancingCurrent": 0,
                      "batteryType": "None",
                      "cellCapacity": 0,
                      "cellMaxCurrent": 0,
                      "cellMaxVoltage": 0,
                      "cellMinVoltage": 0,
                      "cellRatedVoltage": 0,
                      "cellsPerPack": 0,
                      "packCount": 0
                    },
                    "maxACDCPower": 5000,
                    "maxBatteryChargePower": 5000,
                    "maxBatteryDischargePower": 5000,
                    "maxMPPTPower": 6000,
                    "pvArrays": []
                  }
                ],
                "dso": "FLUVIUSANTWERPEN",
                "latitude": 50.85,
                "longitude": 4.35,
                "maximumReserveStateOfCharge": 25,
                "maximumStateOfCharge": 100,
                "meterCurrentLimitation": 25,
                "minimumStateOfCharge": 10,
                "region": "Netherlands",
                "tariffStructure": {
                  "tariffType": "SingleTariffVariable"
                }
              }
            },
            {
              "ean": "5414567000017788328",
              "settings": {
                "a": 1,
                "b": 2
              }
            }
          ]
        }
      },
      "editRequestSingle": {
        "summary": "Edit device",
        "value": {
          "settings": {
            "ACPhaseCount": "3x230V",
            "VAT": 10,
            "converters": [
              {
                "battery": {
                  "balancingCurrent": 0,
                  "batteryType": "None",
                  "cellCapacity": 0,
                  "cellMaxCurrent": 0,
                  "cellMaxVoltage": 0,
                  "cellMinVoltage": 0,
                  "cellRatedVoltage": 0,
                  "cellsPerPack": 0,
                  "packCount": 0
                },
                "maxACDCPower": 5000,
                "maxBatteryChargePower": 5000,
                "maxBatteryDischargePower": 5000,
                "maxMPPTPower": 6000,
                "pvArrays": []
              }
            ],
            "dso": "FLUVIUSANTWERPEN",
            "latitude": 50.85,
            "longitude": 4.35,
            "maximumReserveStateOfCharge": 25,
            "maximumStateOfCharge": 100,
            "meterCurrentLimitation": 25,
            "minimumStateOfCharge": 10,
            "region": "Flanders",
            "tariffStructure": {
              "tariffType": "SingleTariffVariable"
            }
          }
        }
      },
      "evWallboxAuthRequest": {
        "summary": "Wallbox - authenticate",
        "value": {
          "data": {
            "email": "user@servername",
            "password": "apassword",
            "resource": "auth"
          }
        }
      },
      "evWallboxAuthResponse": {
        "summary": "Wallbox - auth response",
        "value": {
          "error": false,
          "jwt": "934jg0283023784j",
          "status": 200,
          "ttl": 5467845675467,
          "user_id": 12345
        }
      },
      "evWallboxChargerRequest": {
        "summary": "Wallbox - charger info",
        "value": {
          "data": {
            "id": 123456,
            "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
            "resource": "chargers"
          }
        }
      },
      "evWallboxChargerResponse": {
        "summary": "Wallbox - charger info",
        "value": {
          "added_discharged_energy": 0,
          "added_energy": 1.193,
          "added_green_energy": 0,
          "added_range": 9,
          "car_id": 1,
          "car_plate": "",
          "charging_power": 0,
          "charging_speed": 0,
          "charging_time": 5607524,
          "config_data": {
            "auto_lock": 0,
            "auto_lock_time": 60,
            "available": 1,
            "charger_has_image": 0,
            "charger_id": 290104,
            "charger_load_type": "Private",
            "connection_type": 1,
            "contract_charging_available": false,
            "country": {
              "code": "BEL",
              "id": 24,
              "iso2": "BE",
              "name": "BÉLGICA",
              "phone_code": "32"
            },
            "currency": {
              "code": "EUR",
              "id": 1,
              "name": "Euro Member Countries",
              "symbol": "€"
            },
            "dca_status": 0,
            "energyCost": {
              "inheritedGroupId": false,
              "value": 0.2
            },
            "energy_price": 0.2,
            "gesture_status": 7,
            "grid_type": 1,
            "group_id": 204012,
            "home_sharing": 0,
            "icp_max_current": 0,
            "language": "EN",
            "live_refresh_time": 30,
            "locked": 0,
            "max_available_current": 32,
            "max_charging_current": 18,
            "mid_enabled": 0,
            "mid_margin": 1,
            "mid_margin_unit": 1,
            "mid_serial_number": "",
            "mid_status": 0,
            "multiuser": 1,
            "name": "Copper Business SN 290104",
            "ocpp_ready": "ocpp_1.6j",
            "operation_mode": "wallbox",
            "owner_id": 201055,
            "part_number": "CPB1-S-2-4-8-002-G",
            "plan": {
              "features": [
                "DEFAULT_FEATURE",
                "POWER_BOOST",
                "MOBILE_CONNECTIVITY",
                "AUTOMATIC_REPORTING",
                "STATISTICS"
              ],
              "plan_name": "Basic"
            },
            "power_sharing_config": 256,
            "purchased_power": 0,
            "remote_action": 0,
            "rfid_type": 0,
            "serial_number": "290104",
            "session_segment_length": 0,
            "sha256_charger_image": "",
            "show_default_user": 1,
            "show_email": 1,
            "show_lastname": 1,
            "show_name": 1,
            "show_profile": 1,
            "software": {
              "currentVersion": "5.7.20",
              "fileName": "cpb1.tar",
              "latestVersion": "5.7.20",
              "updateAvailable": false
            },
            "state": "",
            "sync_timestamp": 1655812654,
            "tariffs": [],
            "timezone": "",
            "uid": "01FR144G8RW4AB8EEHPWJ0Z1RQ",
            "unlock_user_id": 201055,
            "update_refresh_time": 300,
            "user_socket_locking": 0
          },
          "cost": 0,
          "current_mode": 3,
          "depot_name": "LIFEPOWR LAB",
          "depot_price": 0.2,
          "finished": false,
          "last_sync": "2022-07-27 06:27:00",
          "max_available_power": 32,
          "mid_status": 0,
          "name": "Copper Business SN 290104",
          "ocpp_status": 1,
          "power_sharing_status": 0,
          "preventive_discharge": false,
          "state_of_charge": 0,
          "status_id": 0,
          "user_id": 1,
          "user_name": "default"
        }
      },
      "evWallboxChargersRequest": {
        "summary": "Wallbox - chargers list",
        "value": {
          "data": {
            "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
            "resource": "chargers"
          }
        }
      },
      "evWallboxChargersResponse": {
        "summary": "Wallbox - chargers list",
        "value": {
          "result": {
            "groups": [
              {
                "billingInformation": "",
                "chargers": [
                  {
                    "access": true,
                    "addedEnergy": 1.193,
                    "chargerLoadType": "Private",
                    "chargerType": "Copper Business",
                    "chargingPower": 0,
                    "chargingTime": 1369,
                    "connectionType": "wifi",
                    "country": "BE",
                    "currency": 1,
                    "energyCost": {
                      "inheritedGroupId": false,
                      "value": 0.2
                    },
                    "energyPrice": 0.2,
                    "energyUnit": "kWh",
                    "id": 290104,
                    "image": "https://api.wall-box.com/uploads/CPB1-0-2-4-0-00A-A.png",
                    "lastConnection": 1658903220,
                    "lastSync": 1655810877,
                    "locked": 0,
                    "maxChargingCurrent": 18,
                    "midEnabled": false,
                    "midStatus": 0,
                    "name": "Copper Business SN 290104",
                    "ocppConnectionStatus": 1,
                    "ocppReady": "ocpp_1.6j",
                    "operationMode": "wallbox",
                    "powerUnit": "kW",
                    "remoteAction": 0,
                    "software": {
                      "currentVersion": "5.7.20",
                      "fileName": "cpb1.tar",
                      "latestVersion": "5.7.20",
                      "updateAvailable": false
                    },
                    "state": 0,
                    "status": 0,
                    "uid": "01FR144G8RW4AB8EEHPWJ0Z1RQ",
                    "wifiSignal": 75
                  },
                  {
                    "access": true,
                    "addedEnergy": 3.871,
                    "chargerLoadType": "Private",
                    "chargerType": "PulsarPlus",
                    "chargingPower": 0,
                    "chargingTime": 4014,
                    "connectionType": "wifi",
                    "country": "BE",
                    "currency": 1,
                    "energyCost": {
                      "inheritedGroupId": false,
                      "value": 0.35
                    },
                    "energyPrice": 0.35,
                    "energyUnit": "kWh",
                    "id": 283570,
                    "image": "https://api.wall-box.com/uploads/PLP1-0-2-4-0-002-A.png",
                    "lastConnection": 1658902967,
                    "lastSync": 1650544247,
                    "locked": 1,
                    "maxChargingCurrent": 6,
                    "midEnabled": false,
                    "midStatus": 0,
                    "name": "PulsarPlus SN 283570",
                    "ocppConnectionStatus": 4,
                    "ocppReady": "ocpp_1.6j",
                    "operationMode": "ocpp",
                    "powerUnit": "kW",
                    "remoteAction": 0,
                    "software": {
                      "currentVersion": "5.5.10",
                      "fileName": "plp1.tar",
                      "latestVersion": "5.11.14",
                      "updateAvailable": true
                    },
                    "state": false,
                    "status": 0,
                    "uid": "01FQGTC5S100CAM9VZSN3BQE9A",
                    "wifiSignal": 50
                  }
                ],
                "currency": 1,
                "customer": false,
                "energyPrice": 0.2,
                "id": 204012,
                "name": "LIFEPOWR LAB",
                "parent": "",
                "payments_account": false,
                "plan": {
                  "description": "",
                  "features": [
                    "DEFAULT_FEATURE",
                    "POWER_BOOST",
                    "MOBILE_CONNECTIVITY",
                    "AUTOMATIC_REPORTING",
                    "STATISTICS"
                  ],
                  "id": 1,
                  "name": "Basic",
                  "product_id": 1
                },
                "profile": {
                  "id": 1,
                  "name": "admin"
                },
                "subscription": false,
                "uid": "651add98-ea70-44a0-8a89-2a4bc51de390"
              },
              {
                "billingInformation": {
                  "address": "museumstr",
                  "cif": "BE0632577085",
                  "city": "antwerp",
                  "company": true,
                  "country": {
                    "code": "BEL",
                    "id": 24,
                    "iso2": "BE",
                    "name": "BÉLGICA",
                    "phone_code": "32"
                  },
                  "email": "dev@lifepowr.io",
                  "id": 5018,
                  "isTaxFree": true,
                  "isTaxFreeForPlans": true,
                  "name": "LIFEPOWR",
                  "phone": "",
                  "state": "",
                  "surname": "",
                  "zipCode": "2000"
                },
                "chargers": [],
                "currency": 1,
                "customer": false,
                "energyPrice": 0.3,
                "id": 204684,
                "name": "Empty space",
                "parent": false,
                "payments_account": false,
                "plan": {
                  "description": "",
                  "features": [
                    "DEFAULT_FEATURE",
                    "POWER_BOOST",
                    "MOBILE_CONNECTIVITY",
                    "AUTOMATIC_REPORTING",
                    "STATISTICS"
                  ],
                  "id": 1,
                  "name": "Basic",
                  "product_id": 1
                },
                "profile": {
                  "id": 4,
                  "name": "super-admin"
                },
                "subscription": false,
                "uid": "3eb64840-0c54-4b1c-957e-f450d0ddaf93"
              },
              {
                "billingInformation": false,
                "chargers": [
                  {
                    "access": true,
                    "addedEnergy": 0,
                    "chargerLoadType": "Private",
                    "chargerType": "Quasar",
                    "chargingPower": 0,
                    "chargingTime": 35,
                    "connectionType": "ethernet",
                    "country": "BE",
                    "currency": 1,
                    "energyCost": {
                      "inheritedGroupId": false,
                      "value": 0.2
                    },
                    "energyPrice": 0.2,
                    "energyUnit": "kWh",
                    "id": 405861,
                    "image": "https://api.wall-box.com/uploads/DCX1-0-J-2-0-002-A.png",
                    "lastConnection": 1661418145,
                    "lastSync": 1661280397,
                    "locked": 0,
                    "maxChargingCurrent": 19,
                    "midEnabled": false,
                    "midStatus": 0,
                    "name": "Quasar SN 405861",
                    "ocppConnectionStatus": 1,
                    "ocppReady": "ocpp_1.6j",
                    "operationMode": "wallbox",
                    "powerUnit": "kW",
                    "remoteAction": 0,
                    "software": {
                      "currentVersion": "5.11.14",
                      "fileName": "qsx1.tar",
                      "latestVersion": "5.11.14",
                      "updateAvailable": false
                    },
                    "state": false,
                    "status": 161,
                    "uid": "01G684APJKJTS367NM86WK8E88",
                    "wifiSignal": 0
                  }
                ],
                "currency": 1,
                "customer": false,
                "energyPrice": 0.2,
                "id": 310846,
                "name": "Family",
                "parent": false,
                "payments_account": false,
                "plan": {
                  "description": false,
                  "features": [
                    "DEFAULT_FEATURE",
                    "POWER_BOOST",
                    "MOBILE_CONNECTIVITY",
                    "AUTOMATIC_REPORTING",
                    "STATISTICS"
                  ],
                  "id": 1,
                  "name": "Basic",
                  "product_id": 1
                },
                "profile": {
                  "id": 1,
                  "name": "admin"
                },
                "subscription": false,
                "uid": "d283bb35-3357-4211-b5a3-e4dce363e186"
              }
            ]
          }
        }
      },
      "fleetAggregateResponse": {
        "summary": "Response for request of tiemseries measurements",
        "value": {
          "attention": 3,
          "offline": 9,
          "total": 13
        }
      },
      "fleetAllResponse": {
        "summary": "Response for list of available fleets",
        "value": [
          {
            "attributes": {
              "apiKey": "keyString",
              "onboardPolicy": "PolicyName",
              "userId": "sdfgdsfgsdfg-dfgsdg-sd-gdfgs-dt-gs4e"
            },
            "parentGroupNames": [
              "Parent_Fleet_1"
            ],
            "thingGroupDescription": "Description",
            "thingGroupId": "45h546hr-45h435hwrth-wtrhrtyjrt-heerh56",
            "thingGroupName": "Fleet1"
          },
          {
            "attributes": {
              "apiKey": "keyString2",
              "onboardPolicy": "PolicyName 2",
              "userId": "sgd5gd5fgh-sr5hdr6h-sh5hr5hd5h-sd5h5hfd"
            },
            "parentGroupNames": [
              "IO_fleet"
            ],
            "thingGroupDescription": "Description2",
            "thingGroupId": "sdfghfgh-455herdger",
            "thingGroupName": "Fleet2"
          }
        ]
      },
      "fleetApiKeyResponse": {
        "summary": "Response for request of API Key",
        "value": {
          "createdDate": "2022-03-13T37:42:38.000Z",
          "enabled": true,
          "id": "idString",
          "lastUpdatedDate": "2022-03-13T37:42:38.000Z",
          "name": "idName",
          "stageKeys": [],
          "tags": {},
          "value": "idValue"
        }
      },
      "fleetCertificateResponse": {
        "summary": "Response for request of certificates",
        "value": "astringwithazipfile"
      },
      "fleetDeleteRequest": {
        "summary": "Delete fleet",
        "value": {
          "thingGroupName": "FleetName"
        }
      },
      "fleetDeleteResponse": {
        "summary": "Delete fleet",
        "value": {}
      },
      "fleetDeviceClaimRequest": {
        "summary": "Fleet device claim response object",
        "value": {
          "thingName": "sh3sh032jzdzhwkk1znea"
        }
      },
      "fleetDeviceClaimResponse": {
        "summary": "Fleet device claim request object",
        "value": {
          "code": "JUDA78",
          "fleetName": "A_FLEET_NAME"
        }
      },
      "fleetPostRequest": {
        "summary": "Add fleet",
        "value": {
          "parentGroupName": "ParentFleetName",
          "thingGroupDescription": "stupid",
          "thingGroupName": "FleetName",
          "userId": "n87n97n97h-hcfrtesy7-bgrtd2s243z-mnbmngviu98"
        }
      },
      "fleetPostResponse": {
        "summary": "Add fleet",
        "value": {
          "attributes": {
            "apiKey": "APIKEYID",
            "onboardPolicy": "OnboardingPolicyString",
            "userId": "userID"
          },
          "thingGroupArn": "Group ARN string",
          "thingGroupId": "ThingGroupID",
          "thingGroupName": "CreatedFleetName"
        }
      },
      "fleetPutRequest": {
        "summary": "Edit fleet",
        "value": {
          "thingGroupDescription": "stupid2",
          "thingGroupName": "FleetName",
          "userId": "asgrfws3rf4-djty8ku87-aw3rfg4ga-bghmhjkl7g4w3"
        }
      },
      "fleetPutResponse": {
        "summary": "Edit fleet",
        "value": {
          "version": 3
        }
      },
      "fleetResponse": {
        "summary": "Response for list of available fleets",
        "value": {
          "attributes": {
            "apiKey": "keyString",
            "onboardPolicy": "PolicyName",
            "userId": "sdfgdsfgsdfg-dfgsdg-sd-gdfgs-dt-gs4e"
          },
          "parentGroupNames": [
            "Parent_Fleet_1"
          ],
          "thingGroupDescription": "Description",
          "thingGroupId": "45h546hr-45h435hwrth-wtrhrtyjrt-heerh56",
          "thingGroupName": "Fleet1"
        }
      },
      "fleetTimeseriesRequest": {
        "summary": "Fleet timeseries request object",
        "value": {
          "db": "DatabaseName",
          "fleet": "FleetName",
          "table": "tableName",
          "timeEnd": 1234567890.123,
          "timeStart": 1234567890.123
        }
      },
      "fleetTimeseriesResponse": {
        "summary": "Fleet timeseries response object",
        "value": {
          "Grid": {
            "2022-08-25 09:45:00.000000000": {
              "MeterPowerFiltered": 1483.9233010387802,
              "frequency": 499941.02,
              "frequencyResponseActivation": 0,
              "frequencyResponseAllocation": 0
            },
            "2022-08-25 10:00:00.000000000": {
              "MeterPowerFiltered": -162.24872725021606,
              "frequency": 499927.7,
              "frequencyResponseActivation": 0,
              "frequencyResponseAllocation": 0
            },
            "2022-08-25 10:15:00.000000000": {
              "MeterPowerFiltered": -159.66555950700038,
              "frequency": 499975.37,
              "frequencyResponseActivation": 0,
              "frequencyResponseAllocation": 0
            }
          },
          "Household": {
            "2022-08-25 09:45:00.000000000": {
              "LoadPowerFiltered": -690.1143077100979,
              "PV1PowerFiltered": 1962.7937261623056,
              "SoC": 1.0778720168168774,
              "SoEC": 8.526327983183123,
              "SoED": 1.0778720168168774
            },
            "2022-08-25 10:00:00.000000000": {
              "LoadPowerFiltered": -724.2887826951306,
              "PV1PowerFiltered": 2036.7693567571478,
              "SoC": 1.1538387047523684,
              "SoEC": 8.450361295247632,
              "SoED": 1.1538387047523684
            },
            "2022-08-25 10:15:00.000000000": {
              "LoadPowerFiltered": -741.361921485697,
              "PV1PowerFiltered": 2101.092790018816,
              "SoC": 1.3442274727092427,
              "SoEC": 8.259972527290756,
              "SoED": 1.3442274727092427
            }
          }
        }
      },
      "imbalanceResponseForecast": {
        "summary": "Response to a succesfull imbalance forecast request",
        "value": {
          "group_1": {
            "end": "2023-05-12T01:30:00.000Z",
            "forecast": [
              {
                "power": 1000,
                "timestamp": "2023-05-12T00:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T00:30:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T08:45:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T01:00:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T01:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T01:30:00.000Z"
              }
            ],
            "pool": [
              541448820051230600,
              541448820061922560,
              541448820044617900,
              541448820079736060,
              541448820088751600,
              541448820017792100,
              541448820081919200,
              541448820036752260,
              541448820031071550,
              541448820013887550,
              541448820003505540,
              541448820061803700,
              541448820054528960,
              541448820033312640
            ],
            "start": "2023-05-12T00:00:00.000Z",
            "type": "FORECAST_DA_15"
          },
          "group_2": {
            "end": "2023-05-12T01:30:00.000Z",
            "forecast": [
              {
                "power": 1000,
                "timestamp": "2023-05-12T00:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T00:30:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T08:45:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T01:00:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T01:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-12T01:30:00.000Z"
              }
            ],
            "pool": [
              541448820042000000,
              541448820095000000,
              541448820059000000,
              541448820036000000,
              541448820062000000,
              541448820097000000,
              541448820074000000,
              541448820095000000,
              541448820035000000,
              541448820030000000,
              541448820030000000,
              541448820057000000,
              541448820022000000,
              541448820034000000,
              541448820031000000,
              541448820032000000,
              541448820088000000,
              541448820060000000,
              541448820041000000,
              541448820009000000
            ],
            "start": "2023-05-12T00:00:00.000Z",
            "type": "FORECAST_DA_15"
          }
        }
      },
      "imbalanceResponseRealized": {
        "summary": "Response to a succesfull imbalance realized request",
        "value": {
          "group_1": {
            "end": "2023-05-13T01:30:00.000Z",
            "pool": [
              541448820042632960,
              541448820095679200,
              541448820059691260,
              541448820036994750,
              541448820062750850,
              541448820097189700,
              541448820074363970,
              541448820095165440,
              541448820035878460,
              541448820030857500,
              541448820030093600,
              541448820057171460,
              541448820022852400,
              541448820034505600,
              541448820031049340,
              541448820032633700,
              541448820088355200,
              541448820060736060,
              541448820041660000,
              541448820009269800
            ],
            "realized": [
              {
                "power": 1000,
                "timestamp": "2023-05-13T00:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T00:30:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T08:45:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T01:00:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T01:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T01:30:00.000Z"
              }
            ],
            "start": "2023-05-12T00:00:00.000Z"
          },
          "group_2": {
            "end": "2023-05-13T01:30:00.000Z",
            "pool": [
              541448820042000000,
              541448820095000000,
              541448820059000000,
              541448820036000000,
              541448820062000000,
              541448820097000000,
              541448820074000000,
              541448820095000000,
              541448820035000000,
              541448820030000000,
              541448820030000000,
              541448820057000000,
              541448820022000000,
              541448820034000000,
              541448820031000000,
              541448820032000000,
              541448820088000000,
              541448820060000000,
              541448820041000000,
              541448820009000000
            ],
            "realized": [
              {
                "power": 1000,
                "timestamp": "2023-05-13T00:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T00:30:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T08:45:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T01:00:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T01:15:00.000Z"
              },
              {
                "power": 1000,
                "timestamp": "2023-05-13T01:30:00.000Z"
              }
            ],
            "start": "2023-05-12T00:00:00.000Z"
          }
        }
      },
      "linkRequest": {
        "summary": "link - Link device",
        "value": {
          "email": "user@servername"
        }
      },
      "linkResponse": {
        "summary": "link - Link device",
        "value": {}
      },
      "logsResponse": {
        "summary": "logs - Get device logs",
        "value": {
          "backToken": "b/37045088030648211012801943249408068097393308066262679552/s",
          "eosb": false,
          "eosf": false,
          "forwardToken": "f/37045141553328717294238710738740409893749097730723086336/s",
          "logs": [
            {
              "ingestionTime": 1661159257229,
              "message": "{\"status\":true,\"details\":\"\"}",
              "timestamp": 1661159198980
            },
            {
              "ingestionTime": 1661159557287,
              "message": "{\"status\":true,\"details\":\"\"}",
              "timestamp": 1661159499058
            },
            {
              "ingestionTime": 1661159857415,
              "message": "{\"status\":true,\"details\":\"\"}",
              "timestamp": 1661159799151
            },
            {
              "timestamp": 1661160099262
            }
          ]
        }
      },
      "nameRequest": {
        "summary": "name - Changing display name",
        "value": {
          "name": "A display name"
        }
      },
      "nameResponse": {
        "summary": "name - Changing display name",
        "value": {}
      },
      "peripheralDeleteResponse": {
        "summary": "peripherals - Delete peripherals",
        "value": {
          "etrel": {
            "stupidid": {
              "enabled": true,
              "label": "fuuuuuuu",
              "maxAvailableCurrent": 32,
              "maxChargingCurrent": 30,
              "maximumElectricityPrice": 0.15,
              "status": 1,
              "strategy": {
                "mode": "target",
                "schedules": [
                  {
                    "endTime": "10:00",
                    "startTime": "08:00",
                    "targetCurrent": 20
                  },
                  {
                    "endTime": "20:00",
                    "startTime": "18:00",
                    "targetCurrent": 25
                  }
                ]
              }
            }
          }
        }
      },
      "peripheralsGetResponse": {
        "summary": "peripherals - Get list of peripherals",
        "value": {
          "device-id": {
            "alias": "Device Alias",
            "brand": "Brand Name",
            "label": "Device Label",
            "model": "Model Name",
            "serial": "Serial Number",
            "strategy": {
              "mode": "smart"
            },
            "type": "Device Type"
          }
        }
      },
      "peripheralsSetRequest": {
        "summary": "peripherals - Set peripherals",
        "value": {
          "devices": [
            {
              "id": "Device Id",
              "info": {
                "enabled": true,
                "label": "EV Charger Model X123",
                "maxAvailableCurrent": 32,
                "maxChargingCurrent": 30,
                "maximumElectricityPrice": 0.15,
                "status": 1,
                "strategy": {
                  "mode": "target",
                  "schedules": [
                    {
                      "endTime": "10:00",
                      "startTime": "08:00",
                      "targetCurrent": 20
                    },
                    {
                      "endTime": "20:00",
                      "startTime": "18:00",
                      "targetCurrent": 25
                    }
                  ]
                }
              },
              "type": "ev"
            },
            {
              "brand": "etrel",
              "id": "Device Id 2",
              "info": {
                "enabled": true,
                "label": "Label 2",
                "maxAvailableCurrent": 32,
                "maxChargingCurrent": 30,
                "maximumElectricityPrice": 0.15,
                "status": 1,
                "strategy": {
                  "mode": "target",
                  "schedules": [
                    {
                      "endTime": "10:00",
                      "startTime": "08:00",
                      "targetCurrent": 20
                    },
                    {
                      "endTime": "20:00",
                      "startTime": "18:00",
                      "targetCurrent": 25
                    }
                  ]
                }
              },
              "type": "ev"
            }
          ]
        }
      },
      "peripheralsSetResponse": {
        "summary": "Set peripherals response",
        "value": {
          "ev": {
            "failures": [
              "[undefined][ng910-60027-ace0553746]: Brand is required"
            ],
            "success": {
              "etrel": {
                "<peripheral-id>": {
                  "enabled": true,
                  "id": "<peripheral-id>",
                  "label": "fuuuuuuu",
                  "maxAvailableCurrent": 32,
                  "maxChargingCurrent": 30,
                  "maximumElectricityPrice": 0.15,
                  "minPower": 1000,
                  "status": 1,
                  "strategy": {
                    "mode": "target",
                    "schedules": [
                      {
                        "endTime": "10:00",
                        "startTime": "08:00",
                        "targetCurrent": 20
                      },
                      {
                        "endTime": "20:00",
                        "startTime": "18:00",
                        "targetCurrent": 25
                      }
                    ]
                  },
                  "uid": "<generated_unique_id>"
                }
              }
            }
          }
        }
      },
      "realTimeRequest": {
        "summary": "realTime - Request device to trigger real time",
        "value": {}
      },
      "realTimeResponse": {
        "summary": "realTime - Response to a real time request",
        "value": true
      },
      "releasesDownloadResponse": {
        "summary": "Result of request for a releease's download link",
        "value": {
          "url": "aurltodownloadthefile"
        }
      },
      "releasesResponse": {
        "summary": "Response to list available releases",
        "value": [
          {
            "label": "raspberrypi3-development",
            "value": "thekeytodownload"
          },
          {
            "label": "raspberrypi3-nightly",
            "value": "theotherkeytodownload"
          }
        ]
      },
      "savingsExample": {
        "summary": "savings - Request device savings",
        "value": {
          "aggregate": "mo",
          "data": [
            {
              "bills": {
                "ev": 0.5982749195349779,
                "evOnly": 2.360340210125571,
                "lifepowr": 7.221808578774436,
                "none": 21.944911864987127,
                "solar": 19.982214076894124,
                "solarSansevActualTariff": 3.5208558210997256,
                "solarSansevVariableTariff": 0.40102792849175617,
                "solarTariff": 8.851133846904643
              },
              "earnings": {
                "fcr": 3.8309896215124417
              },
              "end": 1698775583940,
              "health": 0.4706169378167082,
              "savings": {
                "battery": 1.6293252681302075,
                "ev": -2.9699378156793466,
                "lifepowr": -1.4905026244777622,
                "solar": 19.1835437263698,
                "tariff": -3.1198278926079697
              },
              "start": 1696114800000
            },
            {
              "bills": {
                "ev": 1.5395673526239226,
                "evOnly": 1.7376541965350736,
                "lifepowr": 1.6796090481498458,
                "none": 11.486093412005733,
                "solar": 15.263828146748464,
                "solarSansevActualTariff": 2.1230177373691914,
                "solarSansevVariableTariff": 2.7740788331495505,
                "solarTariff": 1.451806323689454
              },
              "earnings": {
                "fcr": 2.0616185651360053
              },
              "end": 1696114800000,
              "health": 0.5219765311648594,
              "savings": {
                "battery": -0.22780272446039174,
                "ev": 2.4088656102148107,
                "lifepowr": 0.42325837131996735,
                "solar": 6.974360382321109,
                "tariff": 0.6510610957803591
              },
              "start": 1693522800000
            },
            {
              "bills": {
                "ev": 2.138787024593962,
                "evOnly": 2.0537884262991746,
                "lifepowr": 0.07657967774798102,
                "none": 1.229917675461758,
                "solar": 8.739608181029253,
                "solarSansevActualTariff": 4.560445561135501,
                "solarSansevVariableTariff": 0.22555254944705005,
                "solarTariff": 7.537969228959973
              },
              "earnings": {
                "fcr": 1.0564900974254243
              },
              "end": 1693522800000,
              "health": 0.33720724864259277,
              "savings": {
                "battery": 7.461389551211992,
                "ev": -0.9237352415252973,
                "lifepowr": 3.126496539523541,
                "solar": -1.0494233002844666,
                "tariff": -4.334893011688451
              },
              "start": 1690844400000
            },
            {
              "bills": {
                "ev": 0.7629413533385364,
                "evOnly": 4.706470093204845,
                "lifepowr": 1.3740532773271432,
                "none": 26.24887334168436,
                "solar": 12.72744561365381,
                "solarSansevActualTariff": 0.6778537751802005,
                "solarSansevVariableTariff": 0.23203626884808373,
                "solarTariff": 6.316183652183611
              },
              "earnings": {
                "fcr": 1.1926008982728509
              },
              "end": 1690844400000,
              "health": 0.11457192271302818,
              "savings": {
                "battery": 4.942130374856467,
                "ev": -0.9318597837985652,
                "lifepowr": 4.496312868524351,
                "solar": 21.31036697963143,
                "tariff": -0.4458175063321168
              },
              "start": 1688166000000
            },
            {
              "bills": {
                "ev": 3.542756007589388,
                "evOnly": 3.309689913733759,
                "lifepowr": 4.284954585066358,
                "none": 14.920580919261097,
                "solar": 8.32269454090282,
                "solarSansevActualTariff": 3.679889803406565,
                "solarSansevVariableTariff": 0.390133193357829,
                "solarTariff": 4.524347106953638
              },
              "earnings": {
                "fcr": 8.0967682245888
              },
              "end": 1688166000000,
              "health": 0.008790758477056348,
              "savings": {
                "battery": 0.23939252188727966,
                "ev": 2.4652326101866864,
                "lifepowr": -3.0503640881614564,
                "solar": 11.220757812169508,
                "tariff": -3.289756610048736
              },
              "start": 1685574000000
            }
          ],
          "entries": 5
        }
      },
      "timestreamGetResponse": {
        "summary": "timestream - Get device measurements",
        "value": {
          "billing": {
            "IOBill": {
              "dataType": "double"
            },
            "PVOnlyBill": {
              "dataType": "double"
            },
            "nullBill": {
              "dataType": "double"
            }
          },
          "ems": {
            "EMSMode": {
              "dataType": "double"
            },
            "EVCurrentSetpoint": {
              "dataType": "varchar"
            },
            "consumptionElectricityPrice": {
              "dataType": "double"
            }
          },
          "inverter": {
            "ACCurrent": {
              "dataType": "double"
            },
            "LoadPower": {
              "dataType": "double"
            }
          },
          "performance": {
            "availableMem": {
              "dataType": "double"
            },
            "cpu": {
              "dataType": "double"
            }
          }
        }
      },
      "timestreamPostRequest": {
        "summary": "timestream - Get device timeseries",
        "value": {
          "aggregate": "1m",
          "db": "sampleDB",
          "measures": [
            "MeterPowerFiltered",
            "LoadPowerFiltered"
          ],
          "table": "inverter",
          "timeEnd": 1661077259.171,
          "timeStart": 1661076259.171
        }
      },
      "timestreamPostResponse": {
        "summary": "timestream - Get device timesries",
        "value": {
          "LoadPowerFiltered": [
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:05:00.000000000",
              "value": -179.37
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:06:00.000000000",
              "value": -188.38
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:07:00.000000000",
              "value": -186.9
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:08:00.000000000",
              "value": -191.61
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:09:00.000000000",
              "value": -186.59
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:10:00.000000000",
              "value": -176.69
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:11:00.000000000",
              "value": -125.69
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:12:00.000000000",
              "value": -127.78
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:13:00.000000000",
              "value": -134.43
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:14:00.000000000",
              "value": -134.82
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:15:00.000000000",
              "value": -128.12
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:16:00.000000000",
              "value": -129.56
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:17:00.000000000",
              "value": -131.28
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:18:00.000000000",
              "value": -133.62
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:19:00.000000000",
              "value": -132.2
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:20:00.000000000",
              "value": -130.43
            }
          ],
          "MeterPowerFiltered": [
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:05:00.000000000",
              "value": -190.8
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:06:00.000000000",
              "value": -190.95
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:07:00.000000000",
              "value": -190.47
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:08:00.000000000",
              "value": -193.52
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:09:00.000000000",
              "value": -188.48
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:10:00.000000000",
              "value": -177.95
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:11:00.000000000",
              "value": -137.12
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:12:00.000000000",
              "value": -136.67
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:13:00.000000000",
              "value": -135.7
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:14:00.000000000",
              "value": -136.37
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:15:00.000000000",
              "value": -135.73
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:16:00.000000000",
              "value": -135.87
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:17:00.000000000",
              "value": -137.35
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:18:00.000000000",
              "value": -137.43
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:19:00.000000000",
              "value": -137.95
            },
            {
              "dimensions": {
                "type": "inverter"
              },
              "time": "2022-08-21 10:20:00.000000000",
              "value": -137.42
            }
          ]
        }
      },
      "userDeleteRequest": {
        "summary": "Delete user request object",
        "value": {
          "email": "username@server.country"
        }
      },
      "userDeleteResponse": {
        "summary": "User delete object",
        "value": {
          "email": "username@server.country",
          "metadata": {
            "Enabled": true,
            "UserCreateDate": "2022-08-26T10:55:35.812Z",
            "UserLastModifiedDate": "2022-08-26T10:55:35.812Z",
            "UserStatus": "FORCE_CHANGE_PASSWORD"
          },
          "name": "UserName",
          "role": "Owner",
          "sub": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h",
          "userId": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h"
        }
      },
      "userGetAllResponse": {
        "summary": "List of users",
        "value": [
          {
            "email": "username@server.country",
            "email_verified": "true",
            "fleets": [
              "FleetName1",
              "FleetName2",
              "FleetName3"
            ],
            "metadata": {
              "Enabled": true,
              "UserCreateDate": "2022-02-01T09:42:15.266Z",
              "UserLastModifiedDate": "2022-07-29T10:59:51.037Z",
              "UserStatus": "CONFIRMED"
            },
            "name": "A User Name",
            "role": "Manager",
            "sub": "dsfg645-sdfg-h4563-f34g-sdfg34gd3r",
            "userId": "459g8j-sdfg7-df8g7j-k7809-asda5s4df3"
          }
        ]
      },
      "userGetResponse": {
        "summary": "User object",
        "value": {
          "email": "username@server.country",
          "metadata": {
            "Enabled": true,
            "UserCreateDate": "2022-08-26T10:55:35.812Z",
            "UserLastModifiedDate": "2022-08-26T10:55:35.812Z",
            "UserStatus": "FORCE_CHANGE_PASSWORD"
          },
          "name": "UserName",
          "role": "Owner",
          "sub": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h",
          "userId": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h"
        }
      },
      "userPostRequest": {
        "summary": "Create user request object",
        "value": {
          "email": "username@server.country",
          "name": "UserNameString",
          "role": "Owner"
        }
      },
      "userPostResponse": {
        "summary": "User creation object",
        "value": {
          "email": "username@server.country",
          "metadata": {
            "Enabled": true,
            "UserCreateDate": "2022-08-26T10:55:35.812Z",
            "UserLastModifiedDate": "2022-08-26T10:55:35.812Z",
            "UserStatus": "FORCE_CHANGE_PASSWORD"
          },
          "name": "UserName",
          "role": "Owner",
          "sub": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h",
          "userId": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h"
        }
      },
      "userPutRequest": {
        "summary": "Edit user request object",
        "value": {
          "email": "username@server.country",
          "name": "UserNameString",
          "role": "Owner",
          "tocversion": 23452
        }
      },
      "userPutResponse": {
        "summary": "User edit object",
        "value": {
          "email": "username@server.country",
          "metadata": {
            "Enabled": true,
            "UserCreateDate": "2022-08-26T10:55:35.812Z",
            "UserLastModifiedDate": "2022-08-26T10:55:35.812Z",
            "UserStatus": "FORCE_CHANGE_PASSWORD"
          },
          "name": "UserName",
          "role": "Owner",
          "sub": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h",
          "userId": "dfg89usbfgd-dfs7-sdf9-faw3-segse5gh5r5h"
        }
      }
    },
    "responses": {
      "NotAuthorized": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "The requester is unauthorized."
      },
      "OptionsCORS": {
        "content": {},
        "description": "Default response for CORS method",
        "headers": {
          "Access-Control-Allow-Headers": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Methods": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "siteOnboardingOptionsCORS": {
        "content": {},
        "description": "Default response for CORS method",
        "headers": {
          "Access-Control-Allow-Headers": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Methods": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "termsOptionsCORS": {
        "content": {},
        "description": "Default response for CORS method",
        "headers": {
          "Access-Control-Allow-Headers": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Methods": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "schemas": {
      "Converter": {
        "properties": {
          "battery": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UnsupportedBattery"
              }
            ],
            "type": "object"
          },
          "curtailmentType": {
            "default": "type-N",
            "description": "The type of curtailment this converter is capable of",
            "enum": [
              "type-N",
              "type-G",
              "type-S",
              "type-H",
              "type-X"
            ],
            "title": "Converter curtailment capability type"
          },
          "maxACDCPower": {
            "default": 5000,
            "description": "Maximum rated power of the ACDC converter",
            "maximum": 3000000,
            "minimum": 0,
            "title": "Converter Maximum ACDC Power [W]",
            "type": "number"
          },
          "maxBatteryChargePower": {
            "default": 5000,
            "description": "Maximum power that the converter can charge the battery.",
            "maximum": 3000000,
            "minimum": 0,
            "title": "Converter Maximum Battery Charge Power [W]",
            "type": "number"
          },
          "maxBatteryDischargePower": {
            "default": 5000,
            "description": "Maximum power that the converter can discharge the battery.",
            "maximum": 3000000,
            "minimum": 0,
            "title": "Converter Maximum Battery Discharge Power [W]",
            "type": "number"
          },
          "maxMPPTPower": {
            "default": 6000,
            "description": "Maximum rated power of a single maximum power point tracker",
            "minimum": 0,
            "title": "Converter Maximum MPPT Power [W]",
            "type": "number"
          },
          "pvArrays": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/MPPT"
            },
            "type": "array"
          }
        },
        "required": [
          "maxACDCPower",
          "maxBatteryChargePower",
          "maxBatteryDischargePower",
          "maxMPPTPower",
          "pvArrays",
          "battery",
          "curtailmentType"
        ],
        "type": "object"
      },
      "GenericBattery": {
        "additionalProperties": false,
        "minProperties": 9,
        "properties": {
          "balancingCurrent": {
            "default": 0,
            "description": "Maximum current that can be dissipated when charging a full battery pack",
            "minimum": 0,
            "title": "Battery Pack Balancing Current [A]",
            "type": "number"
          },
          "batteryType": {
            "default": "Unsupported",
            "description": "Battery manufacturer and model",
            "title": "Battery Type",
            "type": "string"
          },
          "cellCapacity": {
            "default": 50,
            "description": "The rated capacity of a single battery cell",
            "minimum": 0,
            "title": "Cell Capacity [Ah]",
            "type": "number"
          },
          "cellMaxCurrent": {
            "default": 100,
            "description": "The maximum acceptable current through a single cell",
            "minimum": 0,
            "title": "Cell Maximum Current [A]",
            "type": "number"
          },
          "cellMaxVoltage": {
            "default": 900,
            "description": "The maximum rated voltage of the cells",
            "minimum": 0,
            "title": "Cell Maximum Voltage [V]",
            "type": "number"
          },
          "cellMinVoltage": {
            "default": 42,
            "description": "The minimum rated voltage of the cells",
            "minimum": 0,
            "title": "Cell Minimum Voltage [V]",
            "type": "number"
          },
          "cellRatedVoltage": {
            "default": 51.2,
            "description": "The rated average voltage of the cells",
            "minimum": 0,
            "title": "Cell Rated Voltage [V]",
            "type": "number"
          },
          "cellsPerPack": {
            "default": 1,
            "description": "The amount of cells in a single battery module",
            "minimum": 1,
            "title": "Cells Per Battery Pack [#]",
            "type": "integer"
          },
          "packCount": {
            "default": 1,
            "description": "The number of battery packs attached to this converter unit",
            "minimum": 1,
            "title": "Battery Pack Count [#]",
            "type": "integer"
          }
        },
        "title": "Unsupported Battery",
        "type": "object"
      },
      "MPPT": {
        "properties": {
          "peakPower": {
            "default": 0,
            "description": "The peak power of the PV array [Wp]",
            "minimum": 0,
            "title": "Peak Power",
            "type": "number"
          },
          "solarPanelOrientation": {
            "default": 0,
            "description": "The orientation of the solar panels attached to this MPPT",
            "maximum": 180,
            "minimum": -180,
            "title": "Solar Panels Orientation [degrees]",
            "type": "number"
          },
          "solarPanelTilt": {
            "default": 50,
            "description": "The tilt of the solar panels attached to this MPPT",
            "maximum": 90,
            "minimum": 0,
            "title": "Solar Panels Tilt [degrees]",
            "type": "number"
          }
        },
        "required": [
          "peakPower",
          "solarPanelTilt",
          "solarPanelOrientation"
        ],
        "type": "object"
      },
      "UnsupportedBattery": {
        "additionalProperties": false,
        "minProperties": 9,
        "properties": {
          "balancingCurrent": {
            "default": 0,
            "description": "Maximum current that can be dissipated when charging a full battery pack",
            "minimum": 0,
            "title": "Battery Pack Balancing Current [A]",
            "type": "number"
          },
          "batteryType": {
            "default": "Unsupported",
            "description": "Battery manufacturer and model",
            "title": "Battery Type",
            "type": "string"
          },
          "cellCapacity": {
            "default": 50,
            "description": "The rated capacity of a single battery cell",
            "minimum": 0,
            "title": "Cell Capacity [Ah]",
            "type": "number"
          },
          "cellMaxCurrent": {
            "default": 100,
            "description": "The maximum acceptable current through a single cell",
            "minimum": 0,
            "title": "Cell Maximum Current [A]",
            "type": "number"
          },
          "cellMaxVoltage": {
            "default": 900,
            "description": "The maximum rated voltage of the cells",
            "minimum": 0,
            "title": "Cell Maximum Voltage [V]",
            "type": "number"
          },
          "cellMinVoltage": {
            "default": 42,
            "description": "The minimum rated voltage of the cells",
            "minimum": 0,
            "title": "Cell Minimum Voltage [V]",
            "type": "number"
          },
          "cellRatedVoltage": {
            "default": 51.2,
            "description": "The rated average voltage of the cells",
            "minimum": 0,
            "title": "Cell Rated Voltage [V]",
            "type": "number"
          },
          "cellsPerPack": {
            "default": 1,
            "description": "The amount of cells in a single battery module",
            "minimum": 1,
            "title": "Cells Per Battery Pack [#]",
            "type": "integer"
          },
          "packCount": {
            "default": 1,
            "description": "The number of battery packs attached to this converter unit",
            "minimum": 1,
            "title": "Battery Pack Count [#]",
            "type": "integer"
          }
        },
        "title": "Unsupported Battery",
        "type": "object"
      },
      "balanceRequest": {
        "description": "Balancing test request body",
        "properties": {
          "data": {
            "properties": {
              "obj": {
                "oneOf": [
                  {
                    "description": "Balancing responsibility object",
                    "properties": {
                      "NEGPOS_00_04": {
                        "description": "Power allocated during the period of 00:00 to 04:00",
                        "type": "number"
                      },
                      "NEGPOS_04_08": {
                        "description": "Power allocated during the period of 04:00 to 08:00",
                        "type": "number"
                      },
                      "NEGPOS_08_12": {
                        "description": "Power allocated during the period of 08:00 to 12:00",
                        "type": "number"
                      },
                      "NEGPOS_12_16": {
                        "description": "Power allocated during the period of 12:00 to 16:00",
                        "type": "number"
                      },
                      "NEGPOS_16_20": {
                        "description": "Power allocated during the period of 16:00 to 20:00",
                        "type": "number"
                      },
                      "NEGPOS_20_24": {
                        "description": "Power allocated during the period of 20:00 to 24:00",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Object containing test information",
                    "properties": {
                      "testFile": {
                        "description": "Test file in string form",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "type": {
                "description": "Type of responsibility to preform",
                "enum": [
                  "test",
                  "responsibility"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "balanceResponseGet": {
        "description": "Response to a succesfull merit order collection request",
        "properties": {
          "NEGPOS_00_04": {
            "description": "Power allocated during the period of 00:00 to 04:00",
            "type": "number"
          },
          "NEGPOS_04_08": {
            "description": "Power allocated during the period of 04:00 to 08:00",
            "type": "number"
          },
          "NEGPOS_08_12": {
            "description": "Power allocated during the period of 08:00 to 12:00",
            "type": "number"
          },
          "NEGPOS_12_16": {
            "description": "Power allocated during the period of 12:00 to 16:00",
            "type": "number"
          },
          "NEGPOS_16_20": {
            "description": "Power allocated during the period of 16:00 to 20:00",
            "type": "number"
          },
          "NEGPOS_20_24": {
            "description": "Power allocated during the period of 20:00 to 24:00",
            "type": "number"
          },
          "target": {
            "description": "Start date of FCR TBUs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "balanceResponsePost": {
        "description": "Response to a succesfull balancing post operation",
        "type": "string"
      },
      "balancingRequest": {
        "description": "Object with balancing request data",
        "properties": {
          "ean": {
            "description": "Household EAN",
            "type": "string"
          }
        },
        "type": "object"
      },
      "balancingResponse": {
        "description": "Object with balancing request data",
        "properties": {
          "ean": {
            "description": "Household EAN",
            "type": "string"
          },
          "reference": {
            "description": "TSO Reference",
            "type": "string"
          }
        },
        "type": "object"
      },
      "calculatorErrorBatInvMismatch": {
        "description": "Error details for battery inverter mismatch request, when the one of battery or inverter are zero, but not both",
        "properties": {
          "error_type": {
            "description": "Error type",
            "example": "batOrInverterZeroButNotBoth",
            "type": "string"
          }
        },
        "required": [
          "error_type"
        ],
        "title": "Calculator Error Battery Inverter Mismatch",
        "type": "object"
      },
      "calculatorErrorOutOfBounds": {
        "description": "Error details for out of bounds request",
        "properties": {
          "error_type": {
            "description": "Error type",
            "example": "outOfBounds",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters that are out of bounds",
            "properties": {
              "key": {
                "description": "Input that is out of bounds",
                "example": "pv_kwp",
                "type": "string"
              },
              "limits": {
                "anyOf": [
                  {
                    "description": "Min and max limits",
                    "properties": {
                      "max": {
                        "description": "Maximum value",
                        "example": 10,
                        "format": "float",
                        "type": "number"
                      },
                      "min": {
                        "description": "Minimum value",
                        "example": 0.1,
                        "format": "float",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Zero not allowed",
                    "properties": {
                      "allow_zero": {
                        "description": "Zero not allowed",
                        "example": false,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Possible choices for the value",
                    "properties": {
                      "choices": {
                        "description": "Possible choices",
                        "items": {
                          "example": [
                            "ABCD",
                            "EFGH"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "value": {
                "description": "Value that is out of bounds",
                "example": 0,
                "format": "float",
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "error_type"
        ],
        "title": "Calculator Error Out of Bounds",
        "type": "object"
      },
      "calculatorErrorUnsupportedRegion": {
        "description": "Error details for unsupported region or segment request",
        "properties": {
          "error_type": {
            "description": "Error type",
            "example": "unsupportedRegionOrSegment",
            "type": "string"
          }
        },
        "required": [
          "error_type"
        ],
        "title": "Calculator Error Unsupported Region or Segment",
        "type": "object"
      },
      "calculatorRequest": {
        "additionalProperties": true,
        "description": "Calculator endpoint request body description",
        "properties": {
          "battery_kwh": {
            "description": "Battery capacity, in kWh",
            "example": 10.5,
            "format": "float",
            "type": "number"
          },
          "ev_kwh": {
            "description": "Annual EV consumption, in kWh",
            "example": 0,
            "format": "float",
            "type": "number"
          },
          "inverter_kw": {
            "description": "Inverter power (inverter connected to the battery), in kW",
            "example": 5,
            "format": "float",
            "type": "number"
          },
          "load_kwh": {
            "description": "Annual household load, in kWh",
            "example": 2000,
            "format": "float",
            "type": "number"
          },
          "pv_kwp": {
            "description": "PV power, in kWp",
            "example": 8.4,
            "format": "float",
            "type": "number"
          },
          "region": {
            "description": "Region of the consumer (BE or NL) (DEFAULT: BE)",
            "example": "BE",
            "type": "string"
          },
          "segment": {
            "description": "Segment of the consumer (residential or sme) (DEFAULT: residential)",
            "example": "residential",
            "type": "string"
          }
        },
        "required": [
          "load_kwh",
          "battery_kwh",
          "inverter_kw",
          "pv_kwp",
          "ev_kwh"
        ],
        "title": "Calculator Request",
        "type": "object"
      },
      "calculatorResponseError": {
        "description": "Calculator endpoint response error body description",
        "properties": {
          "details": {
            "description": "Error details for programatic handling",
            "oneOf": [
              {
                "$ref": "#/components/schemas/calculatorErrorUnsupportedRegion"
              },
              {
                "$ref": "#/components/schemas/calculatorErrorOutOfBounds"
              },
              {
                "$ref": "#/components/schemas/calculatorErrorBatInvMismatch"
              }
            ],
            "type": "object"
          },
          "error": {
            "description": "Textual error description",
            "example": "A string of text giving some details about the error.",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "title": "Calculator Response Error",
        "type": "object"
      },
      "calculatorResponseInternalError": {
        "description": "Calculator endpoint internal error",
        "properties": {
          "error": {
            "description": "Textual error description",
            "example": "A string of text giving some details about the error.",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "title": "Calculator Response Internal Error",
        "type": "object"
      },
      "calculatorResponseOK": {
        "description": "Calculator endpoint response body description",
        "properties": {
          "config": {
            "description": "Reflection of the input data",
            "properties": {
              "battery_kwh": {
                "description": "Battery capacity, in kWh",
                "example": 10.5,
                "format": "float",
                "type": "number"
              },
              "ev_kwh": {
                "description": "Annual EV consumption, in kWh",
                "example": 0,
                "format": "float",
                "type": "number"
              },
              "inverter_kw": {
                "description": "Inverter power (inverter connected to the battery), in kW",
                "example": 5,
                "format": "float",
                "type": "number"
              },
              "load_kwh": {
                "description": "Annual household load, in kWh",
                "example": 2000,
                "format": "float",
                "type": "number"
              },
              "pv_kwp": {
                "description": "PV power, in kWp",
                "example": 8.4,
                "format": "float",
                "type": "number"
              },
              "region": {
                "description": "Region of the consumer",
                "example": "BE",
                "type": "string"
              },
              "segment": {
                "description": "Segment of the consumer",
                "example": "residential",
                "type": "string"
              }
            },
            "type": "object"
          },
          "data_specification": {
            "description": "Specification of the source data used for the simulation",
            "properties": {
              "build_time": {
                "description": "Build timestamp of the source data",
                "example": 1675367135.5029602,
                "format": "double",
                "type": "number"
              },
              "date_from": {
                "description": "Start date of the source data",
                "example": "2023-02-02T00:00:00.000Z",
                "format": "date",
                "type": "string"
              },
              "date_to": {
                "description": "End date of the source data",
                "example": "2024-02-02T00:00:00.000Z",
                "format": "date",
                "type": "string"
              },
              "version": {
                "description": "Version of the source data",
                "example": "0.15.13",
                "type": "string"
              }
            },
            "type": "object"
          },
          "dyntar_flexio_effects": {
            "description": "Financial effects with FlexiO enabled on a Dynamic Tariff",
            "properties": {
              "battery_avoid_inj_cost": {
                "description": "Avoided injection cost due to battery, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "battery_effect": {
                "description": "Financial effect of the battery usage, in currency units",
                "example": 569.65,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "earnings": {
                "description": "Total earnings from energy activities, in currency units",
                "example": 1255.7,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "ev_avoid_inj_cost": {
                "description": "Avoided injection cost due to EV, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "ev_effect": {
                "description": "Financial effect of EV usage, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "pv_effect": {
                "description": "Financial effect of PV generation, in currency units",
                "example": 1773.48,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "tariff_avoid_inj_cost": {
                "description": "Avoided injection cost due to tariff, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "tariff_effect": {
                "description": "Financial effect of tariff, in currency units",
                "example": 383.28,
                "format": "float",
                "nullable": true,
                "type": "number"
              }
            },
            "type": "object"
          },
          "vartar_flexio_effects": {
            "description": "Financial effects with FlexiO enabled on a Single Variable Tariff",
            "properties": {
              "battery_avoid_inj_cost": {
                "description": "Avoided injection cost due to battery, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "battery_effect": {
                "description": "Financial effect of the battery usage, in currency units",
                "example": 580.82,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "earnings": {
                "description": "Total earnings from energy activities, in currency units",
                "example": 1255.7,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "ev_avoid_inj_cost": {
                "description": "Avoided injection cost due to EV, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "ev_effect": {
                "description": "Financial effect of EV usage, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "pv_effect": {
                "description": "Financial effect of PV generation, in currency units",
                "example": 1773.48,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "tariff_avoid_inj_cost": {
                "description": "Avoided injection cost due to tariff, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "tariff_effect": {
                "description": "Financial effect of tariff, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              }
            },
            "type": "object"
          },
          "vartar_noflexio_effects": {
            "description": "Financial effects without FlexiO enabled on a Single Variable Tariff",
            "properties": {
              "battery_avoid_inj_cost": {
                "description": "Avoided injection cost due to battery, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "battery_effect": {
                "description": "Financial effect of the battery usage, in currency units",
                "example": 552.2,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "earnings": {
                "description": "Total earnings from energy activities, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "ev_avoid_inj_cost": {
                "description": "Avoided injection cost due to EV, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "ev_effect": {
                "description": "Financial effect of EV usage, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "pv_effect": {
                "description": "Financial effect of PV generation, in currency units",
                "example": 1773.48,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "tariff_avoid_inj_cost": {
                "description": "Avoided injection cost due to tariff, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              },
              "tariff_effect": {
                "description": "Financial effect of tariff, in currency units",
                "example": 0,
                "format": "float",
                "nullable": true,
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "title": "Calculator Response",
        "type": "object"
      },
      "cepResponse": {
        "properties": {
          "last12MonthsAggregate": {
            "nullable": true,
            "properties": {
              "energyComfortCost": {
                "type": "number"
              },
              "energyComfortPrice": {
                "type": "number"
              },
              "energyStandardPrice": {
                "type": "number"
              },
              "energyUsage": {
                "type": "number"
              }
            },
            "required": [
              "energyComfortPrice",
              "energyStandardPrice",
              "energyUsage",
              "energyComfortCost"
            ],
            "type": "object"
          },
          "last7DaysAggregate": {
            "nullable": true,
            "properties": {
              "energyComfortCost": {
                "type": "number"
              },
              "energyComfortPrice": {
                "type": "number"
              },
              "energyStandardPrice": {
                "type": "number"
              },
              "energyUsage": {
                "type": "number"
              }
            },
            "required": [
              "energyComfortPrice",
              "energyStandardPrice",
              "energyUsage",
              "energyComfortCost"
            ],
            "type": "object"
          },
          "last7DaysHistory": {
            "items": {
              "properties": {
                "_periodFormat": {
                  "type": "string"
                },
                "energyComfortCost": {
                  "type": "number"
                },
                "energyComfortPrice": {
                  "type": "number"
                },
                "energyStandardPrice": {
                  "type": "number"
                },
                "energyUsage": {
                  "type": "number"
                },
                "period": {
                  "format": "date",
                  "type": "string"
                }
              },
              "required": [
                "energyComfortPrice",
                "energyStandardPrice",
                "energyUsage",
                "energyComfortCost",
                "period",
                "_periodFormat"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "lastMonthAggregate": {
            "nullable": true,
            "properties": {
              "energyComfortCost": {
                "type": "number"
              },
              "energyComfortPrice": {
                "type": "number"
              },
              "energyStandardPrice": {
                "type": "number"
              },
              "energyUsage": {
                "type": "number"
              }
            },
            "required": [
              "energyComfortPrice",
              "energyStandardPrice",
              "energyUsage",
              "energyComfortCost"
            ],
            "type": "object"
          },
          "monthlyHistory": {
            "items": {
              "properties": {
                "_periodFormat": {
                  "type": "string"
                },
                "energyComfortCost": {
                  "type": "number"
                },
                "energyComfortPrice": {
                  "type": "number"
                },
                "energyStandardPrice": {
                  "type": "number"
                },
                "energyUsage": {
                  "type": "number"
                },
                "months": {
                  "items": {
                    "properties": {
                      "_periodFormat": {
                        "type": "string"
                      },
                      "energyComfortCost": {
                        "type": "number"
                      },
                      "energyComfortPrice": {
                        "type": "number"
                      },
                      "energyStandardPrice": {
                        "type": "number"
                      },
                      "energyUsage": {
                        "type": "number"
                      },
                      "period": {
                        "pattern": "^\\d{4}-\\d{2}$",
                        "type": "string"
                      }
                    },
                    "required": [
                      "energyComfortPrice",
                      "energyStandardPrice",
                      "energyUsage",
                      "energyComfortCost",
                      "period",
                      "_periodFormat"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "period": {
                  "pattern": "^\\d{4}$",
                  "type": "string"
                }
              },
              "required": [
                "energyComfortPrice",
                "energyStandardPrice",
                "energyUsage",
                "energyComfortCost",
                "period",
                "_periodFormat",
                "months"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "cfDataPush": {
        "description": "Data push object for cloudflex data post",
        "properties": {
          "acCoupledPvPower": {
            "description": "AC coupled PV power in W",
            "type": "number"
          },
          "dcCoupledPvPower": {
            "description": "DC coupled PV power in W",
            "type": "number"
          },
          "ev": {
            "additionalProperties": {
              "properties": {
                "desiredPower": {
                  "description": "Desired power in W - only used for Urgent mode",
                  "type": "number"
                },
                "maxPower": {
                  "description": "Maximum power in W (overwrites `maxAvailableCurrent` setting or required if not set)",
                  "type": "number"
                },
                "maxPrice": {
                  "description": "Maximum price in EUR/kWh - only useful in Economy mode (overwrites `maximumElectricityPrice` setting)",
                  "type": "number"
                },
                "minPower": {
                  "description": "Minimum power in W (overwrites `minPower` setting or required if not set)",
                  "type": "number"
                },
                "mode": {
                  "description": "Charging mode, a string of the number representing the charging mode. (1 - 'Peak Avoidance', 2 - 'Urgent', 3 - 'Smart', 4 - 'Economy', 5 - 'Solar', overwrites `strategy.mode` setting). [More info](https://lifepowr.atlassian.net/wiki/x/DQChP)",
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "type": "string"
                },
                "numberOfPhases": {
                  "description": "Number of phases (overwrites `numberOfPhases` setting or required if not set)",
                  "type": "integer"
                },
                "power": {
                  "description": "Power in W",
                  "type": "number"
                },
                "status": {
                  "description": "Status of the EV charger (`-1` not available; `1` available)",
                  "type": "number"
                }
              },
              "required": [
                "power"
              ],
              "type": "object"
            },
            "description": "EV charging data, where each property is a unique device ID mapping to its EV data object",
            "type": "object"
          },
          "gridPower": {
            "description": "Grid power in W",
            "type": "number"
          },
          "meterPower": {
            "description": "Meter power in W",
            "type": "number"
          },
          "stateOfCharge": {
            "description": "State of charge in %",
            "type": "number"
          },
          "storageCurrent": {
            "description": "Storage current in A",
            "type": "number"
          },
          "storagePower": {
            "description": "Storage power in W",
            "type": "number"
          },
          "storageVoltage": {
            "description": "Storage Voltage in V",
            "type": "number"
          },
          "timestamp": {
            "description": "UNIX timestamp in milliseconds",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "configRequest": {
        "description": "Object describing the new configuration alteration request",
        "properties": {
          "clientToken": {
            "description": "Token to be returned by the websocket error topics, in case an error ocurrs.",
            "type": "string"
          },
          "formData": {
            "description": "New configuration object",
            "properties": {
              "configuration": {
                "description": "General household configuration object",
                "properties": {
                  "address": {
                    "description": "Household address",
                    "type": "string"
                  },
                  "converter": {
                    "description": "Brand and model of converter (separated by whitespace, brand MUST be a single string)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "settings": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "New settings object, the schema of which can be collected from the device via websocket communication.",
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "configResponse": {
        "description": "Successful config action response",
        "type": "object"
      },
      "createRequest": {
        "description": "Create a new device request",
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/deviceObjectRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "createResponse": {
        "description": "Create a new device response",
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/deviceObjectResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "dataGetResponse": {
        "description": "Response object for cloudflex data get",
        "properties": {
          "EVPowerSetpoint": {
            "additionalProperties": {
              "description": "Setpoint value for the EV (in W)",
              "type": "number"
            },
            "description": "Object mapping unique EV IDs to their setpoint values",
            "type": "object"
          },
          "intent": {
            "description": "Communicating the desired FlexIO strategy for the site",
            "type": "number"
          },
          "monthPeak": {
            "description": "Peak power for the month in W",
            "type": "number"
          },
          "powerSetpointACDC": {
            "description": "Power setpoint for grid in W",
            "type": "number"
          },
          "powerSetpointBat": {
            "description": "Power setpoint for battery in W",
            "type": "number"
          },
          "powerSetpointMeter": {
            "description": "Power setpoint for meter in W",
            "type": "number"
          },
          "timestamp": {
            "description": "UNIX timestamp in milliseconds",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "dataPostRequest": {
        "$ref": "#/components/schemas/cfDataPush",
        "description": "Request object for cloudflex data post",
        "required": [
          "timestamp",
          "meterPower",
          "storagePower"
        ]
      },
      "dataPostResponse": {
        "$ref": "#/components/schemas/cfDataPush",
        "description": "Response to a successful cloudflex data post"
      },
      "deleteRequest": {
        "description": "Delete devices request",
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/deviceObjectDeleteRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "deleteResponse": {
        "description": "Delete devices response",
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/deviceObjectDeleteResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "deleteResponseSingle": {
        "description": "Delete device response",
        "properties": {
          "status": {
            "description": "Whether the device request processed properly",
            "type": "boolean"
          },
          "thingName": {
            "description": "Unique device identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "device": {
        "description": "Information about a FlexIO device",
        "properties": {
          "attributes": {
            "description": "Device attributes object",
            "properties": {
              "name": {
                "description": "Device display name",
                "type": "string"
              },
              "serialNbr": {
                "description": "Device serial number",
                "type": "string"
              }
            },
            "type": "object"
          },
          "connectivity": {
            "description": "Connectivity object",
            "properties": {
              "connected": {
                "type": "boolean"
              },
              "disconnectReason": {
                "type": "string"
              },
              "timestamp": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "shadow": {
            "description": "Device shadow - only available for partner and admin users",
            "properties": {
              "desired": {
                "description": "The object describing the desired state of the device",
                "type": "object"
              },
              "reported": {
                "description": "The object reporting the current state of the device",
                "type": "object"
              }
            },
            "type": "object"
          },
          "thingGroupNames": {
            "description": "List of fleets the device belongs to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "thingId": {
            "description": "Device id created at onboarding",
            "type": "string"
          },
          "thingName": {
            "description": "Unique device identifier",
            "type": "string"
          },
          "thingTypeName": {
            "description": "Device type",
            "type": "string"
          }
        },
        "title": "Device object",
        "type": "object"
      },
      "deviceDataGetResponse": {
        "description": "Forecasted data from devices",
        "properties": {
          "devices": {
            "items": {
              "properties": {
                "data": {
                  "properties": {
                    "meterPower": {
                      "description": "Expected meter power in W",
                      "type": "number"
                    },
                    "timestamp": {
                      "description": "UNIX timestamp in seconds",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "ean": {
                  "description": "Household EAN",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nextToken": {
            "description": "To use for pagination, is empty in case there is no more data to collect",
            "type": "string"
          }
        },
        "type": "object"
      },
      "deviceDataPushResponse": {
        "description": "Response to a successful push of device data",
        "properties": {
          "result": {
            "items": {
              "properties": {
                "ean": {
                  "description": "Household EAN",
                  "type": "string"
                },
                "status": {
                  "description": "Whether the data from this device was pushed properly",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "deviceList": {
        "description": "List of objects resulting from a successful query",
        "properties": {
          "nextToken": {
            "description": "Token to provide to get the next page of queried devices",
            "type": "string"
          },
          "things": {
            "description": "Current page of devices",
            "items": {
              "$ref": "#/components/schemas/device"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "deviceObjectDeleteRequest": {
        "description": "Object describing a device",
        "properties": {
          "ean": {
            "description": "Household",
            "type": "string"
          }
        },
        "type": "object"
      },
      "deviceObjectDeleteResponse": {
        "description": "Object describing a device",
        "properties": {
          "ean": {
            "description": "Household EAN",
            "type": "string"
          },
          "error": {
            "description": "Error message in case the device was not processed properly",
            "type": "string"
          },
          "index": {
            "description": "Index of the device in the request array",
            "type": "integer"
          },
          "status": {
            "description": "Whether the device request processed properly",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "deviceObjectRequest": {
        "description": "Request object of a device",
        "properties": {
          "ean": {
            "description": "Household EAN",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/emsschema"
          }
        },
        "type": "object"
      },
      "deviceObjectResponse": {
        "description": "Response object of a device",
        "properties": {
          "ean": {
            "description": "Household EAN",
            "type": "string"
          },
          "error": {
            "description": "Error message in case the device was not processed properly",
            "type": "string"
          },
          "index": {
            "description": "Index of the device in the request array",
            "type": "integer"
          },
          "settings": {
            "$ref": "#/components/schemas/emsschema"
          },
          "status": {
            "description": "Whether the device request processed properly",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "editRequest": {
        "description": "Edit existing devices request",
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/deviceObjectRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "editRequestSingle": {
        "description": "Edit existing devices request",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/emsschema"
          }
        },
        "type": "object"
      },
      "editResponse": {
        "description": "Edit existing devices response",
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/deviceObjectResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "editResponseSingle": {
        "description": "Edit existing device response",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/emsschema"
          },
          "status": {
            "description": "Whether the device request processed properly",
            "type": "boolean"
          },
          "thingName": {
            "description": "Unique device identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emsschema": {
        "description": "Settings relevant to the operation of an IO energy solution",
        "properties": {
          "ACPhaseCount": {
            "default": "1x230V",
            "description": "Grid connection type",
            "enum": [
              "1x230V",
              "3x230V",
              "3x400V"
            ],
            "title": "Grid connection type",
            "type": "string"
          },
          "VAT": {
            "default": 6,
            "description": "VAT percentage",
            "maximum": 100,
            "minimum": 0,
            "title": "VAT",
            "type": "number"
          },
          "converters": {
            "items": {
              "$ref": "#/components/schemas/Converter"
            },
            "maxItems": 1,
            "minItems": 1,
            "type": "array"
          },
          "latitude": {
            "default": 50.85,
            "description": "Latitude of the installation",
            "maximum": 90,
            "minimum": -90,
            "title": "Latitude [degrees]",
            "type": "number"
          },
          "longitude": {
            "default": 4.35,
            "description": "Longitude of the installation",
            "maximum": 180,
            "minimum": -180,
            "title": "Longitude [degrees]",
            "type": "number"
          },
          "maximumReserveStateOfCharge": {
            "default": 20,
            "description": "Maximum percentage of state of charge to keep as emergency reserves.",
            "maximum": 100,
            "minimum": 0,
            "title": "Maximum Reserve State Of Charge [%]",
            "type": "number"
          },
          "maximumStateOfCharge": {
            "default": 100,
            "description": "Operational upper bound on the battery state of charge",
            "maximum": 100,
            "minimum": 0,
            "title": "Maximum State Of Charge [%]",
            "type": "number"
          },
          "meterCurrentLimitation": {
            "default": 25,
            "description": "Meter current limitation [A]",
            "minimum": 0,
            "title": "Meter Current Limitation",
            "type": "number"
          },
          "minimumStateOfCharge": {
            "default": 10,
            "description": "Operational lower bound on the battery state of charge",
            "maximum": 100,
            "minimum": 0,
            "title": "Minimum State Of Charge [%]",
            "type": "number"
          }
        },
        "required": [
          "VAT",
          "countryStructure",
          "r1Variant",
          "cellVoltageDelta",
          "cellTransientResponseTime",
          "initialBalancingPower",
          "balancingPowerDropFactor",
          "cyclingCurrent",
          "minimumStateOfCharge",
          "maximumStateOfCharge",
          "maximumReserveStateOfCharge",
          "latitude",
          "longitude",
          "injectionLimit",
          "EMSHorizon",
          "batteryCycleCost",
          "batterySetpointTimeConstant",
          "EVSetpointTimeConstant",
          "meterPowerDeadband",
          "maxGridCharge",
          "flipEastronPolarity",
          "hasP1",
          "hasEastronMeter",
          "skipClockCheck",
          "persistData",
          "meterCurrentLimitation",
          "ACPhaseCount",
          "injectionPenalty",
          "maxR1Allocation",
          "antiCurtailment",
          "genericLoadMaximumElectricityPrice",
          "isConverterSelfUseCapable",
          "retrofitPVMeasurement",
          "enableThreePhaseLoadBalancing",
          "EVD1Reg",
          "useUnbiasedEstimators",
          "enableIntentSmoothing",
          "enableSolverMaxSolveDuration",
          "disableSolverScaling",
          "maxNumberOfCyclesWithoutConclusion",
          "useRemotePVForecast",
          "shouldExportModelAfterEachOptimization",
          "batteryCCSoC",
          "enableCVChargingSupport",
          "verboseEMSLogs",
          "experimentalCISupport",
          "zeroOutLoss",
          "minimumMonthPeak",
          "baselineMechanism",
          "disableAutosave",
          "frequencyMeterBias",
          "pvArraysRetrofit",
          "converters",
          "EVChargers",
          "doubleTariffVariant"
        ],
        "title": "Lifepowr IO system settings",
        "type": "object"
      },
      "evWallboxAuthRequest": {
        "description": "Wallbox account authentication request body",
        "properties": {
          "data": {
            "properties": {
              "password": {
                "description": "Wallbox account password",
                "type": "string"
              },
              "resource": {
                "enum": [
                  "auth"
                ],
                "type": "string"
              },
              "username": {
                "description": "Wallbox account username",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "evWallboxAuthResponse": {
        "description": "Wallbox account authentication result object",
        "properties": {
          "error": {
            "type": "string"
          },
          "jwt": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "ttl": {
            "type": "number"
          },
          "user_id": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "evWallboxCharger": {
        "properties": {
          "access": {
            "type": "boolean"
          },
          "addedEnergy": {
            "type": "number"
          },
          "chargerLoadType": {
            "type": "string"
          },
          "chargerType": {
            "type": "string"
          },
          "chargingPower": {
            "type": "number"
          },
          "chargingTime": {
            "type": "number"
          },
          "connectionType": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "currency": {
            "type": "number"
          },
          "energyCost": {
            "properties": {
              "inheritedGroupId": {
                "type": "number"
              },
              "value": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "energyPrice": {
            "type": "number"
          },
          "energyUnit": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "image": {
            "type": "string"
          },
          "lastConnection": {
            "type": "number"
          },
          "lastSync": {
            "type": "number"
          },
          "locked": {
            "type": "number"
          },
          "maxChargingCurrent": {
            "type": "number"
          },
          "midEnabled": {
            "type": "boolean"
          },
          "midStatus": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "ocppConnectionStatus": {
            "type": "number"
          },
          "ocppReady": {
            "type": "string"
          },
          "operationMode": {
            "type": "string"
          },
          "powerUnit": {
            "type": "string"
          },
          "remoteAction": {
            "type": "number"
          },
          "software": {
            "properties": {
              "currentVersion": {
                "type": "string"
              },
              "fileName": {
                "type": "string"
              },
              "latestVersion": {
                "type": "string"
              },
              "updateAvailable": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "state": {
            "type": "number"
          },
          "status": {
            "type": "number"
          },
          "uid": {
            "type": "string"
          },
          "wifiSignal": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "evWallboxChargerRequest": {
        "description": "Collect charger info from a specific charger in an account",
        "properties": {
          "data": {
            "properties": {
              "id": {
                "description": "Unique id of the charger, collected from the `chargers` resource",
                "type": "string"
              },
              "jwt": {
                "description": "Authentication token, collected from the `auth` resource",
                "type": "string"
              },
              "resource": {
                "enum": [
                  "charger"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "evWallboxChargerResponse": {
        "description": "Collect charger info from a specific charger in an account",
        "properties": {
          "added_discharged_energy": {
            "type": "number"
          },
          "added_energy": {
            "type": "number"
          },
          "added_green_energy": {
            "type": "number"
          },
          "added_range": {
            "type": "number"
          },
          "car_id": {
            "type": "number"
          },
          "car_plate": {
            "type": "string"
          },
          "charging_power": {
            "type": "number"
          },
          "charging_speed": {
            "type": "number"
          },
          "charging_time": {
            "type": "number"
          },
          "config_data": {
            "properties": {
              "auto_lock": {
                "type": "number"
              },
              "auto_lock_time": {
                "type": "number"
              },
              "available": {
                "type": "number"
              },
              "charger_has_image": {
                "type": "number"
              },
              "charger_id": {
                "type": "number"
              },
              "charger_load_type": {
                "type": "string"
              },
              "connection_type": {
                "type": "number"
              },
              "contract_charging_available": {
                "type": "boolean"
              },
              "country": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "iso2": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "phone_code": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "currency": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "symbol": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "dca_status": {
                "type": "number"
              },
              "energyCost": {
                "properties": {
                  "inheritedGroupId": {
                    "type": "number"
                  },
                  "value": {
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "energy_price": {
                "type": "number"
              },
              "gesture_status": {
                "type": "number"
              },
              "grid_type": {
                "type": "number"
              },
              "group_id": {
                "type": "number"
              },
              "home_sharing": {
                "type": "number"
              },
              "icp_max_current": {
                "type": "number"
              },
              "language": {
                "type": "string"
              },
              "live_refresh_time": {
                "type": "number"
              },
              "locked": {
                "type": "number"
              },
              "max_available_current": {
                "type": "number"
              },
              "max_charging_current": {
                "type": "number"
              },
              "mid_enabled": {
                "type": "number"
              },
              "mid_margin": {
                "type": "number"
              },
              "mid_margin_unit": {
                "type": "number"
              },
              "mid_serial_number": {
                "type": "string"
              },
              "mid_status": {
                "type": "number"
              },
              "multiuser": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "ocpp_ready": {
                "type": "string"
              },
              "operation_mode": {
                "type": "string"
              },
              "owner_id": {
                "type": "number"
              },
              "part_number": {
                "type": "string"
              },
              "plan": {
                "properties": {
                  "features": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "plan_name": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "power_sharing_config": {
                "type": "number"
              },
              "purchased_power": {
                "type": "number"
              },
              "remote_action": {
                "type": "number"
              },
              "rfid_type": {
                "type": "string"
              },
              "serial_number": {
                "type": "string"
              },
              "session_segment_length": {
                "type": "number"
              },
              "sha256_charger_image": {
                "type": "string"
              },
              "show_default_user": {
                "type": "number"
              },
              "show_email": {
                "type": "number"
              },
              "show_lastname": {
                "type": "number"
              },
              "show_name": {
                "type": "number"
              },
              "show_profile": {
                "type": "number"
              },
              "software": {
                "properties": {
                  "currentVersion": {
                    "type": "string"
                  },
                  "fileName": {
                    "type": "string"
                  },
                  "latestVersion": {
                    "type": "string"
                  },
                  "updateAvailable": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "state": {
                "type": "number"
              },
              "sync_timestamp": {
                "type": "number"
              },
              "tariffs": {
                "items": {
                  "type": "string"
                },
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              },
              "unlock_user_id": {
                "type": "number"
              },
              "update_refresh_time": {
                "type": "number"
              },
              "user_socket_locking": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "cost": {
            "type": "number"
          },
          "current_mode": {
            "type": "number"
          },
          "depot_name": {
            "type": "string"
          },
          "depot_price": {
            "type": "number"
          },
          "finished": {
            "type": "boolean"
          },
          "last_sync": {
            "type": "string"
          },
          "max_available_power": {
            "type": "number"
          },
          "mid_status": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "ocpp_status": {
            "type": "number"
          },
          "power_sharing_status": {
            "type": "number"
          },
          "preventive_discharge": {
            "type": "boolean"
          },
          "state_of_charge": {
            "type": "number"
          },
          "status_id": {
            "type": "number"
          },
          "user_id": {
            "type": "number"
          },
          "user_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "evWallboxChargersGroup": {
        "properties": {
          "billingInformation": {
            "additionalProperties": true,
            "type": "object"
          },
          "chargers": {
            "items": {
              "$ref": "#/components/schemas/evWallboxCharger"
            },
            "type": "array"
          },
          "currency": {
            "type": "number"
          },
          "customer": {
            "type": "string"
          },
          "energyPrice": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "payments_account": {
            "type": "boolean"
          },
          "plan": {
            "properties": {
              "description": {
                "type": "string"
              },
              "features": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "product_id": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "profile": {
            "properties": {
              "id": {
                "type": "number"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "subscription": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "evWallboxChargersRequest": {
        "description": "Collect charger list from wallbox account",
        "properties": {
          "data": {
            "properties": {
              "jwt": {
                "description": "Authentication token, collected from the `auth` resource",
                "type": "string"
              },
              "resource": {
                "enum": [
                  "chargers"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "evWallboxChargersResponse": {
        "description": "Collect charger info from a specific charger in an account",
        "properties": {
          "result": {
            "properties": {
              "groups": {
                "items": {
                  "$ref": "#/components/schemas/evWallboxChargersGroup"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "fleet": {
        "properties": {
          "attributes": {
            "properties": {
              "apiKey": {
                "description": "API Key value assigned to the fleet",
                "type": "string"
              },
              "onboardPolicy": {
                "description": "Onboarding policy assigned to the fleet",
                "type": "string"
              },
              "userId": {
                "description": "Cognito identifier of the user assigned to the fleet",
                "type": "string"
              }
            },
            "type": "object"
          },
          "parentGroupNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "thingGroupDescription": {
            "description": "group",
            "type": "string"
          },
          "thingGroupId": {
            "description": "Group ID",
            "type": "string"
          },
          "thingGroupName": {
            "description": "Group name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetAggregateResponse": {
        "properties": {
          "attention": {
            "description": "Number of devices that require attention on the fleet",
            "type": "number"
          },
          "offline": {
            "description": "Number of offline devices on the fleet",
            "type": "number"
          },
          "total": {
            "description": "Number of devices on the fleet",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fleetAllResponse": {
        "items": {
          "$ref": "#/components/schemas/fleet"
        },
        "type": "array"
      },
      "fleetApiKeyResponse": {
        "properties": {
          "createdDate": {
            "description": "ISO 8601 timestamp with creation date",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the key is enabled",
            "type": "boolean"
          },
          "id": {
            "description": "The API key ID",
            "type": "string"
          },
          "lastUpdatedDate": {
            "description": "ISO 8601 timestamp with creation date",
            "type": "string"
          },
          "name": {
            "description": "The API Key name",
            "type": "string"
          },
          "stageKeys": {
            "description": "A list of Stage resources that are associated with the ApiKey resource",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "description": "AWS tags",
            "type": "object"
          },
          "value": {
            "description": "The API Key value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetCertificateResponse": {
        "description": "A base64 encoded zip file with the certificate files",
        "type": "string"
      },
      "fleetDeleteRequest": {
        "properties": {
          "thingGroupName": {
            "description": "Fleet name to remove",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetDeleteResponse": {
        "additionalProperties": true,
        "type": "object"
      },
      "fleetDeviceClaimRequest": {
        "description": "Request to claim a device to a fleet",
        "properties": {
          "code": {
            "description": "The claim code",
            "type": "string"
          },
          "fleetName": {
            "description": "The (full) fleet name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetDeviceClaimResponse": {
        "description": "Successful response to a device claim",
        "properties": {
          "thingName": {
            "description": "The device's unique ID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetGridDatum": {
        "description": "A timeseries datum of fleet energy grid information",
        "properties": {
          "MeterPowerFiltered": {
            "description": "Calculated meter power (kW)",
            "type": "number"
          },
          "frequency": {
            "description": "Grid frequency (Hz)",
            "type": "number"
          },
          "frequencyResponseActivation": {
            "description": "Activated frequency power (kW)",
            "type": "number"
          },
          "frequencyResponseAllocation": {
            "description": "Allocated frequency power (kW)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fleetHouseholdDatum": {
        "description": "A timeseries datum of fleet household information",
        "properties": {
          "LoadPowerFiltered": {
            "description": "Calculated load power (kW)",
            "type": "number"
          },
          "PV1PowerFiltered": {
            "description": "Instantaneous PV power (kW)",
            "type": "number"
          },
          "SoC": {
            "description": "Battery state of charge (%)",
            "type": "number"
          },
          "SoEC": {
            "description": "Available energy to charge (Ah?)",
            "type": "number"
          },
          "SoED": {
            "description": "Available energy to discharge (Ah?)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fleetPostRequest": {
        "properties": {
          "parentGroupName": {
            "description": "Parent fleet name, this name will be appended to the created fleet",
            "type": "string"
          },
          "thingGroupDescription": {
            "description": "Description of fleet",
            "type": "string"
          },
          "thingGroupName": {
            "description": "Fleet name, must be unique within the same fleet",
            "type": "string"
          },
          "userId": {
            "description": "User Id of owner of fleet",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetPostResponse": {
        "properties": {
          "attributes": {
            "description": "Created fleet attributes",
            "properties": {
              "apiKey": {
                "description": "API Key Id for fleet",
                "type": "string"
              },
              "onboardPolicy": {
                "description": "Fleet onboard policy name",
                "type": "string"
              },
              "userId": {
                "description": "Unique ID of user assigned to fleet",
                "type": "string"
              }
            },
            "type": "object"
          },
          "thingGroupArn": {
            "description": "Amazon Resource Name of created fleet",
            "type": "string"
          },
          "thingGroupId": {
            "description": "Unique fleet ID",
            "type": "string"
          },
          "thingGroupName": {
            "description": "Name of created fleet",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetPutRequest": {
        "properties": {
          "parentGroupName": {
            "description": "Parent fleet name, this name will be appended to the created fleet",
            "type": "string"
          },
          "thingGroupDescription": {
            "description": "Description of fleet",
            "type": "string"
          },
          "thingGroupName": {
            "description": "Fleet name, must be unique within the same fleet",
            "type": "string"
          },
          "userId": {
            "description": "User Id of owner of fleet",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fleetPutResponse": {
        "properties": {
          "version": {
            "description": "Version of altered fleet",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fleetTimeseriesRequest": {
        "properties": {
          "db": {
            "description": "Database name to collect data from (deprecated?)",
            "type": "string"
          },
          "fleet": {
            "description": "Name of the fleet to collect data from",
            "type": "string"
          },
          "table": {
            "description": "table name to collect data from (deprecated?)",
            "type": "string"
          },
          "timeEnd": {
            "description": "Unix timestamp (in seconds) to end collection from",
            "type": "number"
          },
          "timeStart": {
            "description": "Unix timestamp (in seconds) to start collection from",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fleetTimeseriesResponse": {
        "properties": {
          "Grid": {
            "additionalProperties": {
              "$ref": "#/components/schemas/fleetGridDatum"
            },
            "description": "Fleet grid information, each object key is a timestamp string inside which a grid datum object is stored",
            "type": "object"
          },
          "Household": {
            "additionalProperties": {
              "$ref": "#/components/schemas/fleetHouseholdDatum"
            },
            "description": "Fleet household information, each object key is a timestamp string inside which a household datum object is stored",
            "type": "object"
          }
        },
        "type": "object"
      },
      "imbalanceResponse": {
        "description": "Response to a succesfull imbalance forecast request",
        "properties": {
          "group_name": {
            "description": "The forecasted or realized data points for the group named `group_name`, the key value will change dynamically",
            "properties": {
              "end": {
                "description": "End date of the data as an ISO-8601 timestamp string",
                "type": "string"
              },
              "forecast": {
                "description": "Forecasted imbalance array",
                "items": {
                  "description": "Forecasted imbalance object",
                  "properties": {
                    "power": {
                      "description": "Forecasted power in W. Positive is injection, negative is drawing.",
                      "type": "number"
                    },
                    "timestamp": {
                      "description": "ISO-8601 timestamp string of the datum in UTC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "pool": {
                "description": "Array of client EANs in the pool",
                "items": {
                  "description": "Client EAN",
                  "type": "number"
                },
                "type": "array"
              },
              "realized": {
                "description": "Forecasted imbalance array",
                "items": {
                  "description": "Forecasted imbalance object",
                  "properties": {
                    "power": {
                      "description": "Realized power in W. Positive is injection, negative is drawing.",
                      "type": "number"
                    },
                    "timestamp": {
                      "description": "ISO-8601 timestamp string of the datum in UTC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "start": {
                "description": "Start date of the data as an ISO-8601 timestamp string",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "iotPolicyRequest": {
        "properties": {
          "IdentityId": {
            "description": "IdentityID to update policy document(s).",
            "type": "string"
          }
        },
        "title": "IoT Policy document to update",
        "type": "object"
      },
      "iotPolicyResponse": {
        "title": "Successful response to an IoT policy update request. True if an update was required, false if no update was required",
        "type": "boolean"
      },
      "linkRequest": {
        "properties": {
          "email": {
            "description": "The email to link the device to",
            "type": "string"
          }
        },
        "type": "object"
      },
      "linkResponse": {
        "description": "Successful log action response",
        "type": "object"
      },
      "loginInfo": {
        "properties": {
          "refreshToken": {
            "description": "Refresh token to be used to collect a new JWT without having to use usernames and passwords",
            "type": "string"
          },
          "token": {
            "description": "JWT token to be used to authenticate other requests in this API",
            "type": "string"
          },
          "type": {
            "description": "Type of user authenticated",
            "type": "string"
          }
        },
        "title": "Authentication Info",
        "type": "object"
      },
      "logsResponse": {
        "description": "Successful link action response",
        "properties": {
          "backToken": {
            "description": "Token to provide to move backwards in time on the pagination",
            "type": "string"
          },
          "eosb": {
            "description": "Whether the backwards stream has reached an end",
            "type": "boolean"
          },
          "eosf": {
            "description": "Whether the forwards stream has reached an end",
            "type": "boolean"
          },
          "forwardToken": {
            "description": "Token to provide to move forwards in time in the pagination",
            "type": "string"
          },
          "logs": {
            "description": "A list of stored logs for the provided `logName`",
            "items": {
              "description": "A log object",
              "properties": {
                "ingestionTime": {
                  "description": "A UNIX milliseconds timestamp representing the time the log was ingested in the cloud",
                  "type": "integer"
                },
                "message": {
                  "description": "A JSON serialized string with the contents of the log",
                  "type": "string"
                },
                "timestamp": {
                  "description": "A UNIX milliseconds timestamp for the occurrence of the log",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "nameRequest": {
        "properties": {
          "name": {
            "description": "The device display name to request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "nameResponse": {
        "description": "Successful name action response",
        "type": "object"
      },
      "peripheralDeleteResponse": {
        "description": "Response to a successful delete of a peripheral - contains the remaining state of peripherals of the type that were deleted",
        "properties": {
          "peripheral-id": {
            "description": "Object containing the status of the deleted peripheral",
            "properties": {
              "label": {
                "description": "Label of the peripheral",
                "type": "string"
              },
              "status": {
                "description": "Integer of the status of the peripheral",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "peripheralsGetResponse": {
        "additionalProperties": {
          "properties": {
            "alias": {
              "description": "Alias or nickname for the device.",
              "type": "string"
            },
            "brand": {
              "description": "Brand of the device.",
              "type": "string"
            },
            "id": {
              "description": "Serial number of the device.",
              "type": "string"
            },
            "label": {
              "description": "Label or name of the device.",
              "type": "string"
            },
            "model": {
              "description": "Model of the device.",
              "type": "string"
            },
            "strategy": {
              "description": "Strategy configuration for the device.",
              "properties": {
                "mode": {
                  "description": "Mode of the strategy (e.g., 'smart').",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": {
              "description": "Type of the device.",
              "type": "string"
            },
            "uid": {
              "description": "Unique identifier for the device (generated from `id``).",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "object"
      },
      "peripheralsSetRequest": {
        "properties": {
          "devices": {
            "description": "List of devices.",
            "items": {
              "properties": {
                "brand": {
                  "description": "Brand of the device (optional).",
                  "type": "string"
                },
                "id": {
                  "description": "Unique identifier for the device.",
                  "type": "string"
                },
                "info": {
                  "description": "Detailed information about the device.",
                  "properties": {
                    "enabled": {
                      "description": "Indicates if the device is steered.",
                      "type": "boolean"
                    },
                    "label": {
                      "description": "Label or name of the device.",
                      "type": "string"
                    },
                    "maxAvailableCurrent": {
                      "description": "Maximum available current for the device.",
                      "type": "integer"
                    },
                    "maxChargingCurrent": {
                      "description": "Maximum charging current for the device.",
                      "type": "integer"
                    },
                    "maximumElectricityPrice": {
                      "description": "Maximum acceptable electricity price.",
                      "type": "number"
                    },
                    "minPower": {
                      "description": "Minimum power (in Watts) required for the device.",
                      "type": "number"
                    },
                    "status": {
                      "description": "Current status of the device (`-1` not available; `1` available).",
                      "type": "integer"
                    },
                    "strategy": {
                      "description": "Charging strategy for the device.",
                      "properties": {
                        "mode": {
                          "description": "Mode of the charging strategy.",
                          "type": "string"
                        },
                        "schedules": {
                          "description": "List of charging schedules.",
                          "items": {
                            "properties": {
                              "endTime": {
                                "description": "End time of the charging schedule.",
                                "type": "string"
                              },
                              "startTime": {
                                "description": "Start time of the charging schedule.",
                                "type": "string"
                              },
                              "targetCurrent": {
                                "description": "Target current for the charging schedule.",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of the device (e.g., 'ev' for electric vehicle charger).",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "brand",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "devices"
        ],
        "type": "object"
      },
      "peripheralsSetResponse": {
        "description": "Response to a successful set of peripherals",
        "properties": {
          "peripherals-type": {
            "description": "Object containing the status of the set peripherals",
            "properties": {
              "failures": {
                "description": "Object containing the status of succesfully set peripherals",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "success": {
                "description": "Object containing the status of succesfully set peripherals",
                "properties": {
                  "peripheral-brand": {
                    "properties": {
                      "peripheral-id": {
                        "description": "Object containing the status of set peripheral",
                        "properties": {
                          "enabled": {
                            "description": "Whether the peripheral is steered or not",
                            "type": "boolean"
                          },
                          "label": {
                            "description": "Label of the peripheral",
                            "type": "string"
                          },
                          "maxChargingCurrent": {
                            "description": "Maximum charging current the peripheral is willing to use",
                            "type": "integer"
                          },
                          "maximumElectricityPrice": {
                            "description": "Maximum electricity price the peripheral is willing to pay",
                            "type": "number"
                          },
                          "status": {
                            "description": "Integer of the status of the peripheral",
                            "type": "integer"
                          },
                          "strategy": {
                            "description": "Custom energy strategy of the peripheral",
                            "properties": {
                              "mode": {
                                "description": "Energy management mode of the peripheral",
                                "type": "string"
                              },
                              "schedules": {
                                "description": "List of schedules for the peripheral",
                                "items": {
                                  "properties": {
                                    "endTime": {
                                      "type": "string"
                                    },
                                    "startTime": {
                                      "type": "string"
                                    },
                                    "targetCurrent": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "realTimeRequest": {
        "nullable": true,
        "type": "object"
      },
      "realTimeResponse": {
        "type": "boolean"
      },
      "releasesDownloadResponse": {
        "properties": {
          "url": {
            "description": "URL to download requested release (valid for 60s)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "releasesResponse": {
        "items": {
          "properties": {
            "label": {
              "description": "Display name",
              "type": "string"
            },
            "value": {
              "description": "Key of file to download",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "savingsObject": {
        "properties": {
          "bills": {
            "properties": {
              "ev": {
                "description": "The cost of charging EVs using FlexIO",
                "type": "number"
              },
              "evOnly": {
                "description": "The cost of charging EVs without using solar or a smart battery",
                "type": "number"
              },
              "lifepowr": {
                "description": "The cost of operating your home load under FlexIO",
                "type": "number"
              },
              "none": {
                "description": "The bill using no product",
                "type": "number"
              },
              "solar": {
                "description": "The bill from using a solar instalation including charging a potential EV",
                "type": "number"
              },
              "solarSansevActualTariff": {
                "description": "The bill from using a solar instalation excluding charging a potential EV with client's tariff",
                "type": "number"
              },
              "solarSansevVariableTariff": {
                "description": "The bill from using a solar instalation excluding charging a potential EV while on variable tariff",
                "type": "number"
              },
              "solarTariff": {
                "description": "The bill from using a solar instalation including charging a potential EV while on dynamic tariff",
                "type": "number"
              }
            },
            "type": "object"
          },
          "earnings": {
            "properties": {
              "fcr": {
                "description": "Earnings from FCR",
                "type": "number"
              }
            },
            "type": "object"
          },
          "end": {
            "description": "The Unix timestamp of the end of the period",
            "type": "number"
          },
          "health": {
            "description": "The health of the measurement - percentage of time device was online and in normal mode",
            "type": "number"
          },
          "savings": {
            "properties": {
              "battery": {
                "description": "Savings due to smart battery steering",
                "type": "number"
              },
              "ev": {
                "description": "Added value from controling EV charging under Flexio",
                "type": "number"
              },
              "lifepowr": {
                "description": "Added value from using FlexIO (battery + dynamic)",
                "type": "number"
              },
              "solar": {
                "description": "Added value from using only solar",
                "type": "number"
              },
              "tariff": {
                "description": "Savings due to dynamic tariff steering",
                "type": "number"
              }
            },
            "type": "object"
          },
          "start": {
            "description": "The Unix timestamp of the start of the period",
            "type": "number"
          }
        },
        "type": "object"
      },
      "savingsResponse": {
        "properties": {
          "aggregate": {
            "description": "The aggregation of the periods. Valid values are 'd' (day), 'w' (week), 'mo' (month)",
            "enum": [
              "d",
              "w",
              "mo"
            ],
            "type": "string"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/savingsObject"
            },
            "type": "array"
          },
          "entries": {
            "description": "The number of requested entries",
            "type": "number"
          }
        },
        "type": "object"
      },
      "siteOnboardingPostRequest": {
        "properties": {
          "address": {
            "properties": {
              "apartmentNumber": {
                "description": "Apartment, suite, etc.",
                "type": "string"
              },
              "city": {
                "description": "City",
                "type": "string"
              },
              "country": {
                "description": "Country or Region",
                "type": "string"
              },
              "postalCode": {
                "description": "Zip or Postal code",
                "type": "string"
              },
              "state": {
                "description": "State or Province",
                "type": "string"
              },
              "streetName": {
                "description": "Street address of the site",
                "type": "string"
              },
              "streetNumber": {
                "description": "Street number of the site",
                "type": "string"
              }
            },
            "type": "object"
          },
          "balancingStartDate": {
            "description": "Date for which balancing is set to start (ISO 8601 compatible, YYYY-MM-DD)",
            "format": "date",
            "type": "string"
          },
          "meterNumber": {
            "description": "Meter serial number",
            "type": "string"
          },
          "tariffStructure": {
            "properties": {
              "tariffMTU": {
                "description": "Market Time Unit for market pricing purposes",
                "enum": [
                  "15m",
                  "30m",
                  "1h"
                ],
                "type": "string"
              },
              "tariffName": {
                "description": "Name of the tariff structure",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "title": "Site Onboarding Request Body",
        "type": "object"
      },
      "siteOnboardingResponse": {
        "properties": {
          "balancingStartDate": {
            "description": "Start date for operations",
            "format": "date",
            "type": "string"
          },
          "ean": {
            "description": "EAN of the site",
            "type": "string"
          },
          "label": {
            "description": "Label of the site",
            "type": "string"
          },
          "ownership": {
            "description": "Ownership of the site",
            "enum": [
              "owned",
              "free",
              "locked"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the site onboarding",
            "enum": [
              "idle",
              "error",
              "active"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "supportedList": {
        "description": "List of supported devices",
        "items": {
          "properties": {
            "brand": {
              "description": "Brand of device",
              "type": "string"
            },
            "model": {
              "description": "Model of device",
              "type": "string"
            },
            "status": {
              "description": "Supported status",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "termsResponse": {
        "properties": {
          "terms": {
            "description": "Full text of the terms and conditions",
            "type": "string"
          },
          "version": {
            "description": "Version of the terms and conditions",
            "type": "string"
          }
        },
        "type": "object"
      },
      "timestreamGetResponse": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Object where each root key defines the available tables. For each root key an internal object is defined whose keys contain the available measurements and for each measurement a `dataType` object is assigned",
        "type": "object"
      },
      "timestreamPostRequest": {
        "description": "Timeseries request object",
        "properties": {
          "aggregate": {
            "description": "Type of aggregate data to collect. Remove this key if you wish to collect raw (2s granularity) data",
            "type": "string"
          },
          "db": {
            "description": "Database to collect data from, should be set to `sampleDB`",
            "type": "string"
          },
          "measures": {
            "description": "The list of measures to collect timeseries from",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "table": {
            "description": "The table the measures should be collected from - list of tables should be retrieved from the GET request",
            "type": "string"
          },
          "timeEnd": {
            "description": "UNIX timestamp in seconds defining the end of the timeseries query",
            "type": "integer"
          },
          "timeStart": {
            "description": "UNIX timestamp in seconds defining the start of the timeseries query",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "timestreamPostResponse": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Object with timeseries information. Each root key contains a name of a measurement requested and each key contains an array of timeseries datum objects",
        "type": "object"
      },
      "userDeleteRequest": {
        "properties": {
          "email": {
            "description": "User email",
            "type": "string"
          }
        },
        "type": "object"
      },
      "userDeleteResponse": {
        "$ref": "#/components/schemas/userObject"
      },
      "userGetAllResponse": {
        "description": "List of available users",
        "items": {
          "$ref": "#/components/schemas/userObject"
        },
        "type": "array"
      },
      "userGetResponse": {
        "$ref": "#/components/schemas/userObject"
      },
      "userLogin": {
        "anyOf": [
          {
            "required": [
              "username",
              "password"
            ]
          },
          {
            "required": [
              "refreshToken"
            ]
          }
        ],
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "refreshToken": {
            "description": "Refresh token string. Used to refresh authentication if the token expires. ",
            "type": "string"
          },
          "type": {
            "description": "(Optional) The preferred type of user to test authorization. Only needs to be used in case the user has multiple types of users with the same email",
            "type": "number"
          },
          "username": {
            "description": "Username string, should be the user's email",
            "type": "string"
          }
        },
        "title": "Account Login Request",
        "type": "object"
      },
      "userObject": {
        "properties": {
          "email": {
            "description": "User email",
            "type": "string"
          },
          "email_verified": {
            "description": "String defining if the user's email is verified",
            "type": "string"
          },
          "fleets": {
            "description": "Array of fleets the user is assigned to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "description": "User metadata object",
            "properties": {
              "Enabled": {
                "description": "Wheter user is enabled or not",
                "type": "boolean"
              },
              "UserCreateDate": {
                "description": "ISO 8601 timestamp depicting creation time",
                "type": "string"
              },
              "UserLastModifiedDate": {
                "description": "ISO 8601 timestamp depicting last edit time",
                "type": "string"
              },
              "UserStatus": {
                "description": "User status string",
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Name attribute of user",
            "type": "string"
          },
          "role": {
            "description": "Role of user. Can be `manager` or `owner`",
            "type": "string"
          },
          "sub": {
            "description": "Subject string",
            "type": "string"
          },
          "userId": {
            "description": "Unique Id of user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "userPostRequest": {
        "properties": {
          "email": {
            "description": "User email",
            "type": "string"
          },
          "name": {
            "description": "User name string",
            "type": "string"
          },
          "role": {
            "description": "user role string",
            "type": "string"
          }
        },
        "type": "object"
      },
      "userPostResponse": {
        "$ref": "#/components/schemas/userObject"
      },
      "userPutRequest": {
        "properties": {
          "email": {
            "description": "User email",
            "type": "string"
          },
          "name": {
            "description": "User name string",
            "type": "string"
          },
          "role": {
            "description": "user role string",
            "type": "string"
          },
          "tocversion": {
            "description": "user ToC version string",
            "type": "string"
          }
        },
        "type": "object"
      },
      "userPutResponse": {
        "$ref": "#/components/schemas/userObject"
      }
    },
    "securitySchemes": {
      "Admin": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "providerARNs": [
            {
              "Fn::Sub": "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/us-east-1_sPVHG4IqJ"
            }
          ],
          "type": "cognito_user_pools"
        },
        "x-amazon-apigateway-authtype": "cognito_user_pools"
      },
      "AdminPartner": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "providerARNs": [
            {
              "Fn::Sub": "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/us-east-1_sPVHG4IqJ"
            },
            {
              "Fn::Sub": "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/us-east-1_eJ9lP0WaW"
            }
          ],
          "type": "cognito_user_pools"
        },
        "x-amazon-apigateway-authtype": "cognito_user_pools"
      },
      "All": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "providerARNs": [
            {
              "Fn::Sub": "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/us-east-1_sPVHG4IqJ"
            },
            {
              "Fn::Sub": "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/us-east-1_zReHCug8l"
            },
            {
              "Fn::Sub": "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/us-east-1_eJ9lP0WaW"
            }
          ],
          "type": "cognito_user_pools"
        },
        "x-amazon-apigateway-authtype": "cognito_user_pools"
      },
      "ApiKey": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey"
      },
      "Custom": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "authorizerCredentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "authorizerUri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthenticatorFunction.Arn}/invocations"
          },
          "identitySource": "method.request.header.Authorization",
          "type": "request"
        },
        "x-amazon-apigateway-authtype": "custom"
      }
    }
  },
  "info": {
    "description": "Interaction with FlexBox and groups of FlexBoxes",
    "title": "FlexIO API",
    "version": "1.1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/auth/iot-policy": {
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "IoTPolicyOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "auth"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "description": "To be used sporadically to update user policies to allow specific connections to devices",
        "operationId": "IoTPolicyFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iotPolicyRequest"
              }
            }
          },
          "description": "User policy information. Refer to [Amplify Docs](https://docs.amplify.aws/lib/auth/access_credentials/q/platform/flutter/) for more info on how to access them.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iotPolicyResponse"
                }
              }
            },
            "description": "Result of a successful login attempt"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Assign device policies to user account",
        "tags": [
          "auth"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IoTAuthFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "body"
      }
    },
    "/auth/login": {
      "post": {
        "description": "Can be used by third parties to acquire a JWT for authentication purposes",
        "operationId": "LoginFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userLogin"
              }
            }
          },
          "description": "User login information",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loginInfo"
                }
              }
            },
            "description": "Result of a successful login attempt"
          }
        },
        "summary": "Programatic user login.",
        "tags": [
          "auth"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "body"
      }
    },
    "/balancing/{companyName}": {
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "BalancingLuminusOptions",
        "parameters": [
          {
            "description": "Name of the company preforming the balancing operation",
            "in": "path",
            "name": "companyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "balancing"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "description": "Attempt to preform balancing operations",
        "operationId": "BalancingPost",
        "parameters": [
          {
            "description": "Name of the company preforming the balancing operation",
            "in": "path",
            "name": "companyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/balanceRequest"
              }
            }
          },
          "description": "Balacing action bodies",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balanceResponsePost"
                }
              }
            },
            "description": "Operation successful"
          }
        },
        "summary": "Balancing company operations",
        "tags": [
          "balancing"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BalancingFunction.Arn}/invocations"
          }
        }
      }
    },
    "/balancing/{companyName}/{option}": {
      "get": {
        "description": "Collect balancing information",
        "operationId": "BalancingGetOps",
        "parameters": [
          {
            "description": "Name of the company",
            "in": "path",
            "name": "companyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of query to be performed",
            "in": "path",
            "name": "option",
            "required": true,
            "schema": {
              "enum": [
                "forecast",
                "realized"
              ],
              "type": "string"
            }
          },
          {
            "description": "Start date of the query, must be a date in the ISO-8601 format",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "End date of the query, must be a date in the ISO-8601 format",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Type of forecast",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "day-ahead-15",
                "day-ahead-10"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Forecast": {
                    "$ref": "#/components/examples/imbalanceResponseForecast"
                  },
                  "Realized": {
                    "$ref": "#/components/examples/imbalanceResponseRealized"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/imbalanceResponse"
                    }
                  ]
                }
              }
            },
            "description": "Operation successful"
          }
        },
        "summary": "Balancing company operations",
        "tags": [
          "balancing"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BalancingFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "BalancingLuminusOptionsOpt",
        "parameters": [
          {
            "description": "Name of the company preforming the balancing operation",
            "in": "path",
            "name": "companyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of query to be performed",
            "in": "path",
            "name": "option",
            "required": true,
            "schema": {
              "enum": [
                "forecast",
                "realized"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "balancing"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/calculator": {
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "CalculatorOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "calculator"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "description": "Collects specific information and/or interacts with FlexIO devices.",
        "operationId": "Calculator",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "CalculateBasic": {
                  "$ref": "#/components/examples/calculatorBasicRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/calculatorRequest"
              }
            }
          },
          "description": "Action bodies",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calculatorResponseOK"
                }
              }
            },
            "description": "Device object"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "CalculateBasic": {
                    "$ref": "#/components/examples/calculatorBasicErrorResponse"
                  },
                  "CalculateBatInvMismatch": {
                    "$ref": "#/components/examples/calculatorErrorResponseBatInvMismatch"
                  },
                  "CalculateOutOfBounds": {
                    "$ref": "#/components/examples/calculatorErrorResponseOutOfBounds"
                  },
                  "CalculateRegionSegment": {
                    "$ref": "#/components/examples/calculatorErrorResponseRegionSegment"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/calculatorResponseError"
                }
              }
            },
            "description": "Request Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calculatorResponseInternalError"
                }
              }
            },
            "description": "Server Error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Solar installation calculator",
        "tags": [
          "calculator"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CalculatorFunctionDocker.Arn}/invocations"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "description": "Lists account's available devices.",
        "operationId": "DeviceList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceList"
                }
              }
            },
            "description": "Device list"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Devices list",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceListOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "description": "Create new devices",
        "operationId": "DeviceCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Edit": {
                  "$ref": "#/components/examples/createRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/createRequest"
              }
            }
          },
          "description": "Edit bodies",
          "required": true
        },
        "responses": {
          "207": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createResponse"
                }
              }
            },
            "description": "Device list"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "summary": "Devices creation",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/devices/{id}": {
      "delete": {
        "description": "Remove existing sites.",
        "operationId": "DeviceDeleteSingle",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteResponseSingle"
                }
              }
            },
            "description": "Device list"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "summary": "Remove existing site",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "get": {
        "description": "Displays information from specific device.",
        "operationId": "DeviceInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device info",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceInfoOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "devices"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of FlexIO device",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Edit an existing site settings.",
        "operationId": "DeviceInfoSet",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Edit": {
                  "$ref": "#/components/examples/editRequestSingle"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/editRequestSingle"
              }
            }
          },
          "description": "Device data push",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/editResponseSingle"
                }
              }
            },
            "description": "Device list"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "summary": "Set site info",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/devices/{id}/cep": {
      "get": {
        "description": "Collects specific information and/or interacts with FlexIO devices.",
        "operationId": "DeviceActionGetCEP",
        "parameters": [
          {
            "description": "ID of CloudFlex or FlexIO site",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Savings": {
                    "$ref": "#/components/examples/cepExample"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/cepResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device interaction",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/",
                {
                  "Fn::Sub": "${ServicesApplication.Outputs.CEPArn}"
                },
                "/invocations"
              ]
            ]
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceActionCEPOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of CloudFlex or FlexIo site",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/devices/{id}/data": {
      "get": {
        "description": "Collects power set points for CloudFlex sites",
        "operationId": "DeviceDataGet",
        "parameters": [
          {
            "description": "ID of CloudFlex site",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Data": {
                    "$ref": "#/components/examples/dataGetResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dataGetResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Site set point collection",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceDataOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of CloudFlex device",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Send data from CloudFlex sites",
        "operationId": "DeviceDataPost",
        "parameters": [
          {
            "description": "ID of CloudFlex device",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/dataPostRequest"
                  }
                ]
              }
            }
          },
          "description": "Action bodies",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Data": {
                    "$ref": "#/components/examples/dataPostResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dataPostResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device interaction",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/devices/{id}/name": {
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceNameOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of CloudFlex or FlexIO site",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Change the name of a FlexIO or CloudFlex site",
        "operationId": "DeviceNamePost",
        "parameters": [
          {
            "description": "ID of FlexIO device",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Name": {
                  "$ref": "#/components/examples/nameRequest"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/nameRequest"
                  }
                ]
              }
            }
          },
          "description": "Action bodies",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "NameExample": {
                    "$ref": "#/components/examples/nameResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/nameResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Site name change",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/devices/{id}/peripherals": {
      "delete": {
        "description": "Removes peripheral devices from CloudFlex sites",
        "operationId": "DevicePeripheralDelete",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "DeletePeripheralExample": {
                    "$ref": "#/components/examples/peripheralDeleteResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/peripheralDeleteResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Site peripheral removal",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "get": {
        "description": "Collects power set points for CloudFlex sites",
        "operationId": "DevicePeripheralGet",
        "parameters": [
          {
            "description": "ID of CloudFlex site",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Peripherals": {
                    "$ref": "#/components/examples/peripheralsGetResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/peripheralsGetResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Site set point collection",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DevicePeripheralsOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of CloudFlex device",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Set up peripheral assets for CloudFlex sites",
        "operationId": "DevicePeripheralsPost",
        "parameters": [
          {
            "description": "ID of CloudFlex device",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Peripherals": {
                  "$ref": "#/components/examples/peripheralsSetRequest"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/peripheralsSetRequest"
                  }
                ]
              }
            }
          },
          "description": "Action bodies",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Peripherals": {
                    "$ref": "#/components/examples/peripheralsSetResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/peripheralsSetResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device peripheral interaction",
        "tags": [
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/devices/{id}/savings": {
      "get": {
        "description": "Collects specific information and/or interacts with FlexIO devices.",
        "operationId": "DeviceActionGetSavings",
        "parameters": [
          {
            "description": "ID of CloudFlex or FlexIO site",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The aggregation datapoints to be displayed - only used if `action=savings`",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "enum": [
                "d",
                "w",
                "mo"
              ],
              "type": "string"
            }
          },
          {
            "description": "The number of entries to display - only used if `action=savings`.",
            "in": "query",
            "name": "entries",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Savings": {
                    "$ref": "#/components/examples/savingsExample"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/savingsResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device interaction",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceActionSavingsOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "devices",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of CloudFlex or FlexIo site",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/devices/{id}/{action}": {
      "delete": {
        "description": "Collects specific information and/or interacts with FlexIO devices.",
        "operationId": "DeviceActionDelete",
        "parameters": [
          {
            "description": "Action to preform:\n * `link` (Partner & Admin): Unlink device from account\n",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "link"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/linkResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device interaction",
        "tags": [
          "devices"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "get": {
        "description": "Collects specific information and/or interacts with FlexIO devices.",
        "operationId": "DeviceActionGetLogs",
        "parameters": [
          {
            "description": "ID of FlexIO device",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Action to preform:\n * `logs` (Partner & Admin): Collect device logs\n * `timestream` (All): Collect available device measurements\n * `savings` (All): Collect the savings from this device\n * `schema` (All): Collect device schema\n * `logs` (Partners & admin): Collect diagnostic logs from your device\n",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "logs",
                "timestream",
                "savings",
                "schema"
              ],
              "type": "string"
            }
          },
          {
            "description": "Name of the log to collect entries for - only used for `action=logs`",
            "in": "query",
            "name": "logName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the databse to collect measurements from (should be set to `sampleDB`) - only used for `action=timestream`",
            "in": "query",
            "name": "db",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Max number of log entries to return - only used for `action=logs`",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "String to continue pagination of a previous query - only used for `action=logs`",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum time range to collect entries from - only used for `action=logs`",
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Weather to search forward in time or reverse - only used for `action=logs`",
            "in": "query",
            "name": "forward",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Logs": {
                    "$ref": "#/components/examples/logsResponse"
                  },
                  "Schema": {
                    "$ref": "#/components/examples/deviceSchemaGetResponse"
                  },
                  "Timestream": {
                    "$ref": "#/components/examples/timestreamGetResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/logsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/timestreamGetResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device interaction",
        "tags": [
          "devices"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "DeviceActionOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "devices"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "ID of FlexIO device",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Action to preform\n",
          "in": "path",
          "name": "action",
          "required": true,
          "schema": {
            "enum": [
              "Value (do not use)"
            ],
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Collects specific information and/or interacts with FlexIO devices.",
        "operationId": "DeviceActionPost",
        "parameters": [
          {
            "description": "ID of FlexIO device",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Action to preform:\n * `link` (Partner & Admin): Link device to account,\n * `config`(All): Set configuration of device. Requires a POST request,\n * `timestream`(All): Collect timeseries data from a device.\n * `balancing`(All): Submit balancing info.\n * `realTime`(All): Setup real time.\n",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "link",
                "config",
                "timestream",
                "balancing",
                "realTime"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Balancing": {
                  "$ref": "#/components/examples/balancingRequest"
                },
                "Config": {
                  "$ref": "#/components/examples/configRequest"
                },
                "Link": {
                  "$ref": "#/components/examples/linkRequest"
                },
                "RealTime": {
                  "$ref": "#/components/examples/realTimeRequest"
                },
                "Timestream": {
                  "$ref": "#/components/examples/timestreamPostRequest"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/linkRequest"
                  },
                  {
                    "$ref": "#/components/schemas/timestreamPostRequest"
                  },
                  {
                    "$ref": "#/components/schemas/configRequest"
                  },
                  {
                    "$ref": "#/components/schemas/balancingRequest"
                  },
                  {
                    "$ref": "#/components/schemas/realTimeRequest"
                  }
                ]
              }
            }
          },
          "description": "Action bodies",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Balancing": {
                    "$ref": "#/components/examples/balancingResponse"
                  },
                  "Config": {
                    "$ref": "#/components/examples/configResponse"
                  },
                  "LinkExample": {
                    "$ref": "#/components/examples/linkResponse"
                  },
                  "RealTime": {
                    "$ref": "#/components/examples/realTimeResponse"
                  },
                  "Timestream": {
                    "$ref": "#/components/examples/timestreamPostResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/linkResponse"
                    },
                    {
                      "$ref": "#/components/schemas/configResponse"
                    },
                    {
                      "$ref": "#/components/schemas/timestreamPostResponse"
                    },
                    {
                      "$ref": "#/components/schemas/balancingResponse"
                    },
                    {
                      "$ref": "#/components/schemas/realTimeResponse"
                    }
                  ]
                }
              }
            },
            "description": "Device object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Device interaction",
        "tags": [
          "devices"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/docs": {
      "get": {
        "operationId": "docs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A 200 response."
          }
        },
        "security": [
          {
            "Custom": []
          }
        ],
        "tags": [
          "docs"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocsFunction.Arn}/invocations"
          }
        }
      }
    },
    "/ev/{brand}": {
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "EvOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "ev"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "Brand name of supported EV REST API",
          "in": "path",
          "name": "brand",
          "required": true,
          "schema": {
            "enum": [
              "wallbox"
            ],
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Creates proxies for differnt EV brands' REST APIs.",
        "operationId": "EvActionPost",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "WallboxAuth": {
                  "$ref": "#/components/examples/evWallboxAuthRequest"
                },
                "WallboxCharger": {
                  "$ref": "#/components/examples/evWallboxChargerRequest"
                },
                "WallboxChargers": {
                  "$ref": "#/components/examples/evWallboxChargersRequest"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/evWallboxAuthRequest"
                  },
                  {
                    "$ref": "#/components/schemas/evWallboxChargersRequest"
                  },
                  {
                    "$ref": "#/components/schemas/evWallboxChargerRequest"
                  }
                ]
              }
            }
          },
          "description": "EV REST API proxy request objects",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "WallboxAuth": {
                    "$ref": "#/components/examples/evWallboxAuthResponse"
                  },
                  "WallboxCharger": {
                    "$ref": "#/components/examples/evWallboxChargerResponse"
                  },
                  "WallboxChargers": {
                    "$ref": "#/components/examples/evWallboxChargersResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/evWallboxAuthResponse"
                    },
                    {
                      "$ref": "#/components/schemas/evWallboxChargersResponse"
                    },
                    {
                      "$ref": "#/components/schemas/evWallboxChargerResponse"
                    }
                  ]
                }
              }
            },
            "description": "EV REST API proxy response objects"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "EV REST api proxies",
        "tags": [
          "ev"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/files/releases": {
      "get": {
        "operationId": "ReleasesGet",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificates": {
                    "$ref": "#/components/examples/releasesResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/releasesResponse"
                    }
                  ]
                }
              }
            },
            "description": "Collect a list of available releases"
          }
        },
        "security": [
          {
            "Admin": []
          }
        ],
        "tags": [
          "files"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FilesListFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "ReleasesOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "files"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/files/releases/{id+}": {
      "get": {
        "operationId": "ReleasesDownload",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificates": {
                    "$ref": "#/components/examples/releasesDownloadResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/releasesDownloadResponse"
                    }
                  ]
                }
              }
            },
            "description": "Generate a download link for a release file"
          }
        },
        "security": [
          {
            "Admin": []
          }
        ],
        "tags": [
          "files"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FilesFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "FileOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "ev"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "Id of file to download",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/fleet": {
      "delete": {
        "operationId": "FleetDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Info": {
                  "$ref": "#/components/examples/fleetDeleteRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/fleetDeleteRequest"
              }
            }
          },
          "description": "Fleet deletion request object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/fleetDeleteResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleetDeleteResponse"
                    }
                  ]
                }
              }
            },
            "description": "Fleet delete response object"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      },
      "get": {
        "operationId": "FleetInfo",
        "parameters": [
          {
            "in": "query",
            "name": "thingGroupName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/fleetResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleet"
                    }
                  ]
                }
              }
            },
            "description": "Fleet action response"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "FleetOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "operationId": "FleetCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Info": {
                  "$ref": "#/components/examples/fleetPostRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/fleetPostRequest"
              }
            }
          },
          "description": "Fleet creation request object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/fleetPostResponse"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/fleetPostResponse"
                }
              }
            },
            "description": "Fleet creation response object"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      },
      "put": {
        "operationId": "FleetEdit",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Info": {
                  "$ref": "#/components/examples/fleetPutRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/fleetPutRequest"
              }
            }
          },
          "description": "Fleet edit request object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/fleetPutResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleetPutResponse"
                    }
                  ]
                }
              }
            },
            "description": "Fleet edit response object"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      }
    },
    "/fleet/all": {
      "get": {
        "operationId": "FleetAllGet",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "All": {
                    "$ref": "#/components/examples/fleetAllResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleetAllResponse"
                    }
                  ]
                }
              }
            },
            "description": "Fleet timeseries response object"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "FleetAllOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "fleet",
          "cloud-flex"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/fleet/certificates": {
      "get": {
        "operationId": "FleetCertificates",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificates": {
                    "$ref": "#/components/examples/fleetCertificateResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleetCertificateResponse"
                    }
                  ]
                }
              }
            },
            "description": "Fleet certificate generation response"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "tags": [
          "fleet"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "FleetCertificatesOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "fleet"
        ],
        "x-amazon-apigateway-api-key-source": "HEADER",
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/fleet/{action}": {
      "get": {
        "operationId": "FleetInfoAll",
        "parameters": [
          {
            "description": "Action to preform:\n * `apikey` (Partner & Admin): Returns API Key of account,\n * `aggregate`(Partner & Admin): Collect aggregate status of fleet devices.\n",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "apikey",
                "certificates",
                "aggregate"
              ],
              "type": "string"
            }
          },
          {
            "description": "Name of the group to interact with. Required for `certificates`, `apikey` and `aggregate` actions",
            "in": "query",
            "name": "thingGroupName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "API key ID string. Collected from the `apikey` action.",
            "in": "query",
            "name": "apiKeyId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Aggregate": {
                    "$ref": "#/components/examples/fleetAggregateResponse"
                  },
                  "ApiKey": {
                    "$ref": "#/components/examples/fleetApiKeyResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleetApiKeyResponse"
                    },
                    {
                      "$ref": "#/components/schemas/fleetAggregateResponse"
                    }
                  ]
                }
              }
            },
            "description": "Fleet timeseries response object"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 29000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "FleetActionOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "fleet"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "parameters": [
        {
          "description": "Action to preform:\n",
          "in": "path",
          "name": "action",
          "required": true,
          "schema": {
            "enum": [
              "Value (don't use this)"
            ],
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "FleetTimeseries",
        "parameters": [
          {
            "description": "Action to preform:\n * `timeseries` (Partner & Admin): Queries fleet timeseries,\n * `claim-device` (Partner & Admin): Claim a device into a fleet,\n",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "timeseries",
                "claim-device"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Claim": {
                  "$ref": "#/components/examples/fleetDeviceClaimRequest"
                },
                "Info": {
                  "$ref": "#/components/examples/fleetTimeseriesRequest"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/fleetTimeseriesRequest"
                  },
                  {
                    "$ref": "#/components/schemas/fleetDeviceClaimRequest"
                  }
                ]
              }
            }
          },
          "description": "Fleet timeseries request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Claim": {
                    "$ref": "#/components/examples/fleetDeviceClaimResponse"
                  },
                  "Info": {
                    "$ref": "#/components/examples/fleetTimeseriesResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/fleetTimeseriesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/fleetDeviceClaimResponse"
                    }
                  ]
                }
              }
            },
            "description": "Fleet timeseries response"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "fleet"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FleetFunction.Arn}/invocations"
          }
        }
      }
    },
    "/supplier/site-onboarding/{siteId}": {
      "get": {
        "operationId": "SupplierSiteOnboardingGet",
        "parameters": [
          {
            "description": "EAN of the site being onboarded",
            "in": "path",
            "name": "siteId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/siteOnboardingResponse"
                }
              }
            },
            "description": "Operation successful"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Get site onboarding information",
        "tags": [
          "Supplier"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ServicesApplication.Outputs.ApiRoleArn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServicesApplication.Outputs.ImbalanceArn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "operationId": "SupplierSiteOnboardingOptions",
        "parameters": [
          {
            "description": "EAN of the site being onboarded",
            "in": "path",
            "name": "siteId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/siteOnboardingOptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "Supplier"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "operationId": "SupplierSiteOnboardingPost",
        "parameters": [
          {
            "description": "EAN of the site being onboarded",
            "in": "path",
            "name": "siteId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/siteOnboardingPostRequest"
              }
            }
          },
          "description": "Request body for onboarding a site",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/siteOnboardingResponse"
                }
              }
            },
            "description": "Operation successful"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "summary": "Onboard site",
        "tags": [
          "Supplier"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ServicesApplication.Outputs.ApiRoleArn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServicesApplication.Outputs.ImbalanceArn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      }
    },
    "/supported": {
      "get": {
        "description": "Provides a list of supported devices and models",
        "operationId": "supported",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "BasicList": {
                    "$ref": "#/components/examples/devicesSupportedResponse"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/supportedList"
                }
              }
            },
            "description": "Device list"
          }
        },
        "summary": "Show supported devices and models",
        "tags": [
          "devices"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SupportedFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "supportedOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "terms"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/swagger.json": {
      "get": {
        "operationId": "swaggerJson",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A 200 response."
          }
        },
        "security": [
          {
            "Custom": []
          }
        ],
        "tags": [
          "docs"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocsFunction.Arn}/invocations"
          }
        }
      }
    },
    "/terms": {
      "get": {
        "description": "Shows terms and conditions and current version.",
        "operationId": "terms",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/termsResponse"
                }
              }
            },
            "description": "Terms and conditions response"
          }
        },
        "summary": "Show terms and conditions",
        "tags": [
          "terms"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TermsFunction.Arn}/invocations"
          }
        },
        "x-amazon-apigateway-request-validator": "params"
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "termsOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/termsOptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "terms"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/user": {
      "delete": {
        "operationId": "UserDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Info": {
                  "$ref": "#/components/examples/userDeleteRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/userDeleteRequest"
              }
            }
          },
          "description": "User deletion request object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/userDeleteResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/userDeleteResponse"
                    }
                  ]
                }
              }
            },
            "description": "User delete response object"
          }
        },
        "security": [
          {
            "AdminPartner": []
          }
        ],
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations"
          }
        }
      },
      "get": {
        "operationId": "UserInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/userGetResponse"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/userGetResponse"
                }
              }
            },
            "description": "User action response"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "UserOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      },
      "post": {
        "operationId": "UserCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Info": {
                  "$ref": "#/components/examples/userPostRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/userPostRequest"
              }
            }
          },
          "description": "User creation request object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/userPostResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/userPostResponse"
                    }
                  ]
                }
              }
            },
            "description": "User creation response object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations"
          }
        }
      },
      "put": {
        "operationId": "UserEdit",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Info": {
                  "$ref": "#/components/examples/userPutRequest"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/userPutRequest"
              }
            }
          },
          "description": "User edit request object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/userPutResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/userPutResponse"
                    }
                  ]
                }
              }
            },
            "description": "User edit response object"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations"
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "operationId": "UserAllGet",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Info": {
                    "$ref": "#/components/examples/userGetAllResponse"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/userGetAllResponse"
                    }
                  ]
                }
              }
            },
            "description": "Get all users response"
          }
        },
        "security": [
          {
            "All": []
          }
        ],
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations"
          }
        }
      },
      "options": {
        "description": "Enable CORS by returning correct headers",
        "operationId": "UserAllOptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionsCORS"
          }
        },
        "summary": "CORS support",
        "tags": [
          "users"
        ],
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{\n  \"statusCode\" : 200\n}\n"
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "responseTemplates": {
                "application/json": "{}\n"
              },
              "statusCode": "200"
            }
          },
          "type": "mock"
        }
      }
    },
    "/ws-docs": {
      "get": {
        "operationId": "wsDocs",
        "responses": {
          "200": {
            "content": {
              "html/text": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A 200 response."
          }
        },
        "security": [
          {
            "Custom": []
          }
        ],
        "tags": [
          "docs"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDocsFunction.Arn}/invocations"
          }
        }
      }
    },
    "/{proxy+}": {
      "parameters": [
        {
          "description": "Multiple path catch-all for documentation files",
          "in": "path",
          "name": "proxy+",
          "required": true,
          "schema": {
            "enum": [
              "wallbox"
            ],
            "type": "string"
          }
        }
      ],
      "x-amazon-apigateway-any-method": {
        "operationId": "docs",
        "produces": [
          "application/json"
        ],
        "x-amazon-apigateway-integration": {
          "credentials": {
            "Fn::Sub": "${ApiRole.Arn}"
          },
          "httpMethod": "POST",
          "timeoutInMillis": 10000,
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocsFunction.Arn}/invocations"
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "Production server",
      "url": "https://api.io-comms.com/v1"
    },
    {
      "description": "Development server",
      "url": "https://api.io-comms.com/dev"
    },
    {
      "description": "Bleeding edge server",
      "url": "https://api.io-comms.com/next"
    }
  ],
  "tags": [
    {
      "description": "Operations related to authentication and authorization",
      "name": "auth"
    },
    {
      "description": "Operations related to one or many FlexIO devices",
      "name": "devices"
    },
    {
      "description": "Operations related to flexibility on the cloud",
      "name": "cloud-flex"
    },
    {
      "description": "Operations related with FlexIO fleets",
      "name": "fleet"
    },
    {
      "description": "Operations related with user accounts",
      "name": "users"
    },
    {
      "description": "Operations related to downloading files and/or releases",
      "name": "files"
    },
    {
      "description": "Operations regarding interacting with EV vendors' APIs",
      "name": "ev"
    },
    {
      "description": "Documentation endpoints",
      "name": "docs"
    },
    {
      "description": "The Lifepowr solar installation calculator",
      "name": "calculator"
    }
  ],
  "x-amazon-apigateway-gateway-responses": {
    "UNAUTHORIZED": {
      "responseParameters": {
        "gatewayresponse.header.WWW-Authenticate": "'Basic'"
      }
    }
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true
    },
    "body": {
      "validateRequestBody": true,
      "validateRequestParameters": false
    },
    "params": {
      "validateRequestBody": false,
      "validateRequestParameters": true
    }
  }
}